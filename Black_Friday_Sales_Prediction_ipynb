{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/YASHGARG7004/Ml-project/blob/main/Black_Friday_Sales_Prediction_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Problem Statement"
      ],
      "metadata": {
        "id": "3ksw31jOfGgV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### The goal is to predict the purchase amount for customers based on their demographics, product details, and historical purchase data. This prediction can guide personalized marketing strategies"
      ],
      "metadata": {
        "id": "sDDQ1KgUfBcc"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6RSG-aLeW8b5"
      },
      "source": [
        "## 2. Steps to Solve"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nYr_GmAbW8b6"
      },
      "source": [
        "1. Understanding the Dataset\n",
        "\n",
        "   The dataset contains:\n",
        "*   Customer demographics: Age, gender, marital status, city type, stay in\n",
        "     current city.\n",
        "*   Product details: Product ID, product category.\n",
        "*   Target variable: Purchase amount.\n",
        "\n",
        "2. Approach\n",
        "\n",
        "  We'll build a predictive model using the following steps:\n",
        "\n",
        "\n",
        "Step1:    Data Preprocessing\n",
        "\n",
        "* Handle Missing Values: Fill or remove missing values appropriately.\n",
        "* Feature Engineering: Convert categorical variables (e.g., gender, city_type) into numerical formats using techniques like one-hot encoding or label encoding.  \n",
        "* Scaling Numeric Features: Standardize or normalize numeric features like age and purchase amount to bring them onto a similar scale.\n",
        "\n",
        "Step2:    Exploratory Data Analysis (EDA)\n",
        "\n",
        "\n",
        "*   Analyze purchase patterns across demographics (e.g., average purchase by age group, gender, or city type).\n",
        "*   Understand the relationship between product categories and purchase amounts\n",
        "\n",
        "* Visualize the distribution of the target variable to detect skewness.\n",
        "\n",
        "Step 3: Model Building\n",
        "\n",
        "\n",
        "*   Data Split: Split the dataset into training and testing sets.\n",
        "*   Model Selection: Experiment with regression models like: Decision Tree, Regressor Random Forest Regressor, Gradient Boosting Regressor\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GHYovu35W8b7"
      },
      "source": [
        "## Variable\tDefinition"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "02zJNQ6XW8b7"
      },
      "outputs": [],
      "source": [
        "# User_ID\tUser ID\n",
        "# Product_ID\tProduct ID\n",
        "# Gender\tSex of User\n",
        "# Age\tAge in bins\n",
        "# Occupation\tOccupation (Masked)\n",
        "# City_Category\tCategory of the City (A,B,C)\n",
        "# Stay_In_Current_City_Years\tNumber of years stay in current city\n",
        "# Marital_Status\tMarital Status\n",
        "# Product_Category_1\tProduct Category (Masked)\n",
        "# Product_Category_2\tProduct may belongs to other category also (Masked)\n",
        "# Product_Category_3\tProduct may belongs to other category also (Masked)\n",
        "# Purchase\tPurchase Amount (Target Variable)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qo_lNQ1uW8b8"
      },
      "source": [
        "## Importing Libraries and Loading data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l9VMJDE4W8b8"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iQLW23c-W8b8"
      },
      "outputs": [],
      "source": [
        "data = pd.read_csv(\"black.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "_CdNvEZpW8b9",
        "outputId": "95ae6b3d-4aa5-4437-975a-2732b0d12f5f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User_ID Product_ID Gender   Age  Occupation City_Category  \\\n",
              "0  1000001  P00069042      F  0-17          10             A   \n",
              "1  1000001  P00248942      F  0-17          10             A   \n",
              "2  1000001  P00087842      F  0-17          10             A   \n",
              "3  1000001  P00085442      F  0-17          10             A   \n",
              "4  1000002  P00285442      M   55+          16             C   \n",
              "\n",
              "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
              "0                          2               0                   3   \n",
              "1                          2               0                   1   \n",
              "2                          2               0                  12   \n",
              "3                          2               0                  12   \n",
              "4                         4+               0                   8   \n",
              "\n",
              "   Product_Category_2  Product_Category_3  Purchase  \n",
              "0                 NaN                 NaN      8370  \n",
              "1                 6.0                14.0     15200  \n",
              "2                 NaN                 NaN      1422  \n",
              "3                14.0                 NaN      1057  \n",
              "4                 NaN                 NaN      7969  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-58a31463-84a1-4a4b-b5dd-745e636cbdbf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>M</td>\n",
              "      <td>55+</td>\n",
              "      <td>16</td>\n",
              "      <td>C</td>\n",
              "      <td>4+</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58a31463-84a1-4a4b-b5dd-745e636cbdbf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-58a31463-84a1-4a4b-b5dd-745e636cbdbf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-58a31463-84a1-4a4b-b5dd-745e636cbdbf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-57ae2ae3-50fe-45ef-865c-6c21fd956c9b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-57ae2ae3-50fe-45ef-865c-6c21fd956c9b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-57ae2ae3-50fe-45ef-865c-6c21fd956c9b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QSAr-Xf4W8b9",
        "outputId": "0a360c46-d80f-4dba-9948-a35be0d10759"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(550068, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bHS2uBldW8b-",
        "outputId": "8e2ed523-dfb4-48b4-f928-9f00bd4fa7f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 550068 entries, 0 to 550067\n",
            "Data columns (total 12 columns):\n",
            " #   Column                      Non-Null Count   Dtype  \n",
            "---  ------                      --------------   -----  \n",
            " 0   User_ID                     550068 non-null  int64  \n",
            " 1   Product_ID                  550068 non-null  object \n",
            " 2   Gender                      550068 non-null  object \n",
            " 3   Age                         550068 non-null  object \n",
            " 4   Occupation                  550068 non-null  int64  \n",
            " 5   City_Category               550068 non-null  object \n",
            " 6   Stay_In_Current_City_Years  550068 non-null  object \n",
            " 7   Marital_Status              550068 non-null  int64  \n",
            " 8   Product_Category_1          550068 non-null  int64  \n",
            " 9   Product_Category_2          376430 non-null  float64\n",
            " 10  Product_Category_3          166821 non-null  float64\n",
            " 11  Purchase                    550068 non-null  int64  \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 50.4+ MB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RufD5it6W8b-"
      },
      "source": [
        "`Age` should be treated as a numerical column\n",
        "\n",
        "`City_Category` we can convert this to a numerical column and should look at the frequency of each city category.\n",
        "\n",
        "`Gender` has two values and should be converted to binary values\n",
        "\n",
        "`Product_Category_2` and `Product_Category_3` have null values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZaO-ZG4xW8b-"
      },
      "source": [
        "## Checking Null values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "j7ZQ3SE4W8b-",
        "outputId": "771e14cd-31bb-4a92-d850-c87056522a9e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User_ID                            0\n",
              "Product_ID                         0\n",
              "Gender                             0\n",
              "Age                                0\n",
              "Occupation                         0\n",
              "City_Category                      0\n",
              "Stay_In_Current_City_Years         0\n",
              "Marital_Status                     0\n",
              "Product_Category_1                 0\n",
              "Product_Category_2            173638\n",
              "Product_Category_3            383247\n",
              "Purchase                           0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>173638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>383247</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "data.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bRcVk59uW8b-"
      },
      "source": [
        "## Null Value in percentage"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "QMKSOmLPW8b_",
        "outputId": "09d60f31-30a2-425a-84b4-efa2e7a9a00b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User_ID                        0.000000\n",
              "Product_ID                     0.000000\n",
              "Gender                         0.000000\n",
              "Age                            0.000000\n",
              "Occupation                     0.000000\n",
              "City_Category                  0.000000\n",
              "Stay_In_Current_City_Years     0.000000\n",
              "Marital_Status                 0.000000\n",
              "Product_Category_1             0.000000\n",
              "Product_Category_2            31.566643\n",
              "Product_Category_3            69.672659\n",
              "Purchase                       0.000000\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>31.566643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>69.672659</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "data.isnull().sum()/data.shape[0]*100"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fSnqC9vAW8b_"
      },
      "source": [
        "There are 31% null values in the `Product_Category_2` and 69% null values in the `Product_Category_3`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "98j2wNSMW8b_"
      },
      "source": [
        "# Unique elements in each attributes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "T7vM3C72W8b_",
        "outputId": "5095d3ba-d82f-49b7-f536-a8b93168b49a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User_ID                        5891\n",
              "Product_ID                     3631\n",
              "Gender                            2\n",
              "Age                               7\n",
              "Occupation                       21\n",
              "City_Category                     3\n",
              "Stay_In_Current_City_Years        5\n",
              "Marital_Status                    2\n",
              "Product_Category_1               20\n",
              "Product_Category_2               17\n",
              "Product_Category_3               15\n",
              "Purchase                      18105\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>5891</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>3631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>18105</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "data.nunique()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pFSimjyCW8b_"
      },
      "source": [
        "We can drop `User_ID` and `Product_ID` for model prediction as it has more unique values."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gbgkcXqYW8b_"
      },
      "source": [
        "# EDA"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HqIpS5idW8cA"
      },
      "source": [
        "## Target Variable Purchase"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 433
        },
        "id": "tDszPqhoW8cA",
        "outputId": "17420e99-d473-4441-d0f4-52fc34217511"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.boxplot(data[\"Purchase\"])\n",
        "plt.title(\"Boxplot of Purchase\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "n_qt069UW8cB",
        "outputId": "dac13def-10a9-4a60-b3d7-e23761f17851"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    550068.000000\n",
              "mean       9263.968713\n",
              "std        5023.065394\n",
              "min          12.000000\n",
              "25%        5823.000000\n",
              "50%        8047.000000\n",
              "75%       12054.000000\n",
              "max       23961.000000\n",
              "Name: Purchase, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>550068.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>9263.968713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>5023.065394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5823.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>8047.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>12054.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>23961.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "data[\"Purchase\"].describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nowZGKzTW8cB"
      },
      "source": [
        "The purchase is right skewed and we can observe multiple peaks in the distribution we can do a log transformation for the purchase."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QQ1ikdqAW8cB"
      },
      "source": [
        "### Gender"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "S2L2lUIgW8cC",
        "outputId": "bec295aa-e27e-4bbb-9e0d-8292c0a09928"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.countplot(data['Gender'])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "291T9keJW8cC",
        "outputId": "2ee066ce-d782-4fd3-c1f0-516ba3e170d6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Gender\n",
              "M    75.310507\n",
              "F    24.689493\n",
              "Name: proportion, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>proportion</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>M</th>\n",
              "      <td>75.310507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>F</th>\n",
              "      <td>24.689493</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "data['Gender'].value_counts(normalize=True)*100"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Su7mIz5qW8cC"
      },
      "source": [
        "There are more males than females"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "FYWle9csW8cC",
        "outputId": "501191b8-31b3-4475-a6ae-a14b362f979c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gender\n",
            "F    8734.565765\n",
            "M    9437.526040\n",
            "Name: Purchase, dtype: float64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-20-91ba400e4a28>:13: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(data=mean_purchase_by_gender, x=\"Gender\", y=\"Purchase\", palette=[\"blue\", \"pink\"])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Group by Gender and compute the mean of Purchase\n",
        "mean_purchase_by_gender = data.groupby(\"Gender\")[\"Purchase\"].mean()\n",
        "\n",
        "print(mean_purchase_by_gender)\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Group by Gender and compute mean Purchase\n",
        "mean_purchase_by_gender = data.groupby(\"Gender\")[\"Purchase\"].mean().reset_index()\n",
        "\n",
        "# Plotting the bar graph\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.barplot(data=mean_purchase_by_gender, x=\"Gender\", y=\"Purchase\", palette=[\"blue\", \"pink\"])\n",
        "plt.title(\"Average Purchase Amount by Gender\", fontsize=16)\n",
        "plt.xlabel(\"Gender\", fontsize=12)\n",
        "plt.ylabel(\"Average Purchase Amount\", fontsize=12)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DJTUcb1gW8cC"
      },
      "source": [
        "On average the male gender spends more money on purchase contrary to female, and it is possible to also observe this trend by adding the total value of purchase."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YB_j1f4IW8cD"
      },
      "source": [
        "### Marital Status"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the count of Marital_Status\n",
        "sns.countplot(x=data['Marital_Status'])\n",
        "plt.title(\"Count of Marital Status\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "cPMLM9T4mqDo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TFU-VDwbW8cD"
      },
      "source": [
        "There are more unmarried people in the dataset who purchase more"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zrzeu7uCW8cD",
        "outputId": "5f7274b8-ad91-4712-f19e-75fb9314184a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "data.groupby(\"Marital_Status\").mean()[\"Purchase\"].plot(kind='bar')\n",
        "plt.title(\"Marital_Status and Purchase Analysis\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NqSO58RPW8cJ"
      },
      "source": [
        "This is interesting though unmarried people spend more on purchasing, the average purchase amount of married and unmarried people are the same."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "09g7V2XuW8cJ"
      },
      "source": [
        "### Occupation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "id": "NqWk2AjeW8cJ",
        "outputId": "926d9fa7-511e-41b7-bf65-a843b1828d51"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Set the figure size\n",
        "plt.figure(figsize=(18, 5))\n",
        "\n",
        "# Plot the count of 'Occupation'\n",
        "sns.countplot(x=data['Occupation'])\n",
        "\n",
        "# Show the plot\n",
        "plt.title(\"Count of Occupation\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hxiq5OIkW8cJ"
      },
      "source": [
        "Occupation has at least 20 different values. Since we do not known to each occupation each number corresponds, is difficult to make any analysis. Furthermore, it seems we have no alternative but to use since there is no way to reduce this number"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0h04ToiTW8cJ",
        "outputId": "fc84463f-132c-4fa4-de1b-1cf8669762bd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>9186.946726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>9017.703095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>9025.938982</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>9238.077277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>9279.026742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>5</td>\n",
              "      <td>9388.848978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>6</td>\n",
              "      <td>9336.378620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>7</td>\n",
              "      <td>9502.175276</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>8</td>\n",
              "      <td>9576.508530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>9</td>\n",
              "      <td>8714.335934</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>10</td>\n",
              "      <td>9052.836410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>11</td>\n",
              "      <td>9299.467190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>12</td>\n",
              "      <td>9883.052460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>13</td>\n",
              "      <td>9424.449391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>14</td>\n",
              "      <td>9568.536426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>15</td>\n",
              "      <td>9866.239925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>16</td>\n",
              "      <td>9457.133118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>17</td>\n",
              "      <td>9906.378997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>18</td>\n",
              "      <td>9233.671418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>19</td>\n",
              "      <td>8754.249162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>20</td>\n",
              "      <td>8881.099514</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               Purchase\n",
              "Occupation             \n",
              "0           9186.946726\n",
              "1           9017.703095\n",
              "2           9025.938982\n",
              "3           9238.077277\n",
              "4           9279.026742\n",
              "5           9388.848978\n",
              "6           9336.378620\n",
              "7           9502.175276\n",
              "8           9576.508530\n",
              "9           8714.335934\n",
              "10          9052.836410\n",
              "11          9299.467190\n",
              "12          9883.052460\n",
              "13          9424.449391\n",
              "14          9568.536426\n",
              "15          9866.239925\n",
              "16          9457.133118\n",
              "17          9906.378997\n",
              "18          9233.671418\n",
              "19          8754.249162\n",
              "20          8881.099514"
            ]
          },
          "execution_count": 145,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "occup = pd.DataFrame(data.groupby(\"Occupation\").mean()[\"Purchase\"])\n",
        "occup"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "id": "k4bS9_ZQW8cK",
        "outputId": "f01b9478-93ea-4bcf-d724-83eb97a6023b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Group by Occupation and calculate the mean of 'Purchase'\n",
        "occupation_purchase = data.groupby('Occupation')['Purchase'].mean()\n",
        "\n",
        "# Plotting the bar chart\n",
        "occupation_purchase.plot(kind='bar', figsize=(15, 5))\n",
        "\n",
        "# Adding title and showing the plot\n",
        "plt.title(\"Occupation and Purchase Analysis\")\n",
        "plt.xlabel(\"Occupation\")\n",
        "plt.ylabel(\"Average Purchase Amount\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HP4Y55k7W8cK"
      },
      "source": [
        "Although there are some occupations which have higher representations, it seems that the amount each user spends on average is more or less the same for all occupations. Of course, in the end, occupations with the highest representations will have the highest amounts of purchases."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MbkJCPsCW8cK"
      },
      "source": [
        "### City_Category"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 579
        },
        "id": "zQ8TSwgpW8cK",
        "outputId": "cccc0ff3-56f3-4768-8d5b-a5c1fe5b352e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-11-e37e4d44a9fe>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=data['City_Category'], palette=['#FF6347', '#4682B4', '#32CD32'])  # Custom colors\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plotting countplot with custom colors\n",
        "sns.countplot(x=data['City_Category'], palette=['#FF6347', '#4682B4', '#32CD32'])  # Custom colors\n",
        "\n",
        "plt.title(\"City Category Distribution\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NA_5L14LW8cK"
      },
      "source": [
        "It is observed that city category B has made the most number of puchases."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "GmsTCpoYW8cL",
        "outputId": "3a47a873-3dc6-4aed-cfbc-9ec5dd17e113"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Group by 'City_Category' and calculate the mean of 'Purchase'\n",
        "city_purchase = data.groupby(\"City_Category\")[\"Purchase\"].mean()\n",
        "\n",
        "# Plotting the bar chart with different colors for each bar\n",
        "city_purchase.plot(kind='bar', figsize=(10, 5), color=['#FF6347', '#4682B4', '#32CD32'])\n",
        "\n",
        "# Adding title and showing the plot\n",
        "plt.title(\"City Category and Purchase Analysis\")\n",
        "plt.xlabel(\"City Category\")\n",
        "plt.ylabel(\"Average Purchase Amount\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n5OvEfbJW8cL"
      },
      "source": [
        "However, the city whose buyers spend the most is city type ‘C’."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rb_no0UdW8cL"
      },
      "source": [
        "### Stay_In_Current_City_Years"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 579
        },
        "id": "TC6dN0oOW8cL",
        "outputId": "c8142c2c-1252-4231-dc9b-9b1ff4ca7f67"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-c570e804fafb>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=data['Stay_In_Current_City_Years'], palette=['#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Custom colors for each bar\n",
        "sns.countplot(x=data['Stay_In_Current_City_Years'], palette=['#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2'])\n",
        "\n",
        "plt.title(\"Stay in Current City Years Distribution\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tvQkgee_W8cM"
      },
      "source": [
        "It looks like the longest someone is living in that city the less prone they are to buy new things. Hence, if someone is new in town and needs a great number of new things for their house that they’ll take advantage of the low prices in Black Friday to purchase all the things needed."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jSeshDF6W8cM"
      },
      "source": [
        "We see the same pattern seen before which show that on average people tend to spend the same amount on purchases regardeless of their group. People who are new in city are responsible for the higher number of purchase, however looking at it individually they tend to spend the same amount independently of how many years the have lived in their current city."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "heSqfZlzW8cM"
      },
      "source": [
        "### Age"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-w8Ngj_OW8cM",
        "outputId": "48b57e6d-89c4-447a-9561-480fcabfb320"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.countplot(data['Age'])\n",
        "plt.title('Distribution of Age')\n",
        "plt.xlabel('Different Categories of Age')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "txCk3LnGW8cN"
      },
      "source": [
        "Age 26-35 Age group makes the most no of purchases in the age group."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "Gt_LCEG4W8cN",
        "outputId": "9e6e3165-dd88-40b4-ceba-65287711e3ff"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2QAAAHwCAYAAADJgKy0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABbDElEQVR4nO3dd3gUZeP18bMJpFCSECCNJgLSm/TeIlFABEGpAgqIFJUuPCoqKk06KlG6GgRUQJpABASB0EJHOkhQSQJCSAECJPP+wY99WULJYsIkm+/nunI97Nx3NmeyrM8eZuYei2EYhgAAAAAAj52T2QEAAAAAIKuikAEAAACASShkAAAAAGASChkAAAAAmIRCBgAAAAAmoZABAAAAgEkoZAAAAABgEgoZAAAAAJiEQgYAAAAAJqGQAQAypA8//FAWi8XsGHZr2LChypUrZ3aMTKVhw4Zq2LBhujx3Zv17BCDroJABQCbw5ZdfymKxqEaNGmZHyXC6desmi8Vi/fLw8FDFihU1YcIEJSYmmh0v06levbosFoumT59udhQAyBIoZACQCYSEhOiJJ57Qjh07dOLECbPjZDiurq769ttv9e2332rUqFHy9vbW4MGD1bVrV7OjZSrHjx/Xzp079cQTTygkJMTsOGnivffe09WrV82OAQD3RSEDgAzu9OnT2rp1qyZOnKj8+fM7zAfltJQtWzZ17txZnTt3Vr9+/bRu3TpVrVpVCxcu1D///POfnz8hISENUmZ83333nXx8fDRhwgRt3bpVf/75p9mR/rNs2bLJzc3N7BgAcF8UMgDI4EJCQpQnTx41b95cbdu2vW8h+/fff/XKK6/Iw8NDXl5e6tq1q/bt2yeLxaK5c+fazD1y5Ijatm0rb29vubm5qWrVqlq2bFmq8owfP161a9dW3rx55e7uripVqujHH39MMc9isahfv35aunSpypUrJ1dXV5UtW1arV69OMXfz5s2qVq2a3NzcVKxYMX311VepynI/Tk5O1muSbpcKi8WiDz/8MMXcJ554Qt26dbM+njt3riwWizZu3Kg+ffrIx8dHBQsWtI7/8ssvatCggXLnzi0PDw9Vq1ZN8+fPT/G8f/zxhxo1aqQcOXKoQIECGjdunM349evXNWLECFWpUkWenp7KmTOn6tWrpw0bNqR4rgULFqhKlSrWn1m+fHlNmTLFZk5MTIz69++vQoUKydXVVcWLF9fYsWOVnJycyt+aNH/+fLVt21YtWrSQp6fnPffr9jVZJ06cULdu3eTl5SVPT0+9+uqrunLlis3cOXPmqHHjxvLx8ZGrq6vKlCnz0FMh4+PjlTNnTr399tspxv766y85Oztr9OjRkqQbN27oo48+UokSJeTm5qa8efOqbt26Cg0NTZH3TqGhoapbt668vLyUK1culSxZUv/73/9S/XsCgLSUzewAAIAHCwkJ0YsvvigXFxd16NBB06dP186dO1WtWjXrnOTkZD3//PPasWOHevfurVKlSunnn3++5yl7hw4dUp06dVSgQAENGzZMOXPm1KJFi9SqVSv99NNPat269QPzTJkyRS1btlSnTp10/fp1LViwQC+99JJWrFih5s2b28zdvHmzFi9erD59+ih37tyaOnWq2rRpo4iICOXNm1eSdODAATVt2lT58+fXhx9+qJs3b+qDDz6Qr6/vf/q9nTx5UpKsP8deffr0Uf78+TVixAjrEbK5c+fqtddeU9myZTV8+HB5eXlpz549Wr16tTp27Gj93kuXLunZZ5/Viy++qJdfflk//vij3nnnHZUvX17PPfecJCk2NlYzZ85Uhw4d1LNnT8XFxWnWrFkKCgrSjh07VKlSJUm3ykOHDh3UpEkTjR07VpJ0+PBhbdmyxVparly5ogYNGujvv/9Wr169VLhwYW3dulXDhw/XuXPnNHny5Ifu7/bt23XixAnNmTNHLi4uevHFFxUSEnLfovLyyy+raNGiGj16tHbv3q2ZM2fKx8fHmlGSpk+frrJly6ply5bKli2bli9frj59+ig5OVl9+/a95/PmypVLrVu31sKFCzVx4kQ5Oztbx77//nsZhqFOnTpJulW2Ro8erR49eqh69eqKjY3Vrl27tHv3bj3zzDP3fP5Dhw6pRYsWqlChgkaOHClXV1edOHFCW7ZseejvCADShQEAyLB27dplSDJCQ0MNwzCM5ORko2DBgsbbb79tM++nn34yJBmTJ0+2bktKSjIaN25sSDLmzJlj3d6kSROjfPnyxrVr16zbkpOTjdq1axslSpR4aKYrV67YPL5+/bpRrlw5o3HjxjbbJRkuLi7GiRMnrNv27dtnSDKmTZtm3daqVSvDzc3NOHPmjHXbH3/8YTg7Oxup+b+prl27Gjlz5jTOnz9vnD9/3jhx4oQxatQow2KxGBUqVLDJ88EHH6T4/iJFihhdu3a1Pp4zZ44hyahbt65x8+ZN6/aYmBgjd+7cRo0aNYyrV6/aPEdycrL1zw0aNDAkGd988411W2JiouHn52e0adPGuu3mzZtGYmKizfNcunTJ8PX1NV577TXrtrffftvw8PCwyXK3jz/+2MiZM6dx7Ngxm+3Dhg0znJ2djYiIiPt+7239+vUzChUqZN2XtWvXGpKMPXv22Mz74IMPDEk2GQ3DMFq3bm3kzZvXZtvdf1cMwzCCgoKMJ5980mZbgwYNjAYNGlgfr1mzxpBk/PLLLzbzKlSoYDOvYsWKRvPmzR+4X7fz3jZp0iRDknH+/PkHfh8APC6csggAGVhISIh8fX3VqFEjSbdOu2vXrp0WLFigpKQk67zVq1cre/bs6tmzp3Wbk5NTiqMQFy9e1Pr16/Xyyy8rLi5OFy5c0IULF/Tvv/8qKChIx48f199///3ATO7u7tY/X7p0SZcvX1a9evW0e/fuFHMDAwNVrFgx6+MKFSrIw8NDp06dkiQlJSVpzZo1atWqlQoXLmydV7p0aQUFBaXmVyTp1jVe+fPnV/78+VW8eHH973//U61atbRkyZJUP8fdevbsaXN0JjQ0VHFxcRo2bFiKa5LuPiUuV65c6ty5s/Wxi4uLqlevbt1vSXJ2dpaLi4ukW0c4L168qJs3b6pq1ao2v0svLy8lJCTYnIZ3tx9++EH16tVTnjx5rK/phQsXFBgYqKSkJG3atOmB+3rz5k0tXLhQ7dq1s+7L7VMN73eK7BtvvGHzuF69evr3338VGxtr3Xbn35XLly/rwoULatCggU6dOqXLly/fN09gYKACAgJsfvbBgwe1f/9+m9+rl5eXDh06pOPHjz9w/+7k5eUlSfr555/tOp0TANILhQwAMqikpCQtWLBAjRo10unTp3XixAmdOHFCNWrUUFRUlNatW2ede+bMGfn7+ytHjhw2z1G8eHGbxydOnJBhGHr//fetBeb21wcffCBJio6OfmCuFStWqGbNmnJzc5O3t7fy58+v6dOn3/MD9p0l67Y8efLo0qVLkqTz58/r6tWrKlGiRIp5JUuWfGCOO7m5uSk0NFShoaHatGmTzp49qy1btujJJ59M9XPcrWjRojaPb58CmZp7jBUsWDBFSbtzv2+bN2+eKlSoYL3+KX/+/Fq5cqXN77JPnz566qmn9Nxzz6lgwYJ67bXXUlyHd/z4ca1evTrFaxoYGCjp4a/p2rVrdf78eVWvXt369+z06dNq1KiRvv/++3sWl7tf2zx58kiSzT5u2bJFgYGBypkzp7y8vJQ/f37rKZAPKmROTk7q1KmTli5dar0uLSQkRG5ubnrppZes80aOHKmYmBg99dRTKl++vIYMGaL9+/c/cF/btWunOnXqqEePHvL19VX79u21aNEiyhkA03ANGQBkUOvXr9e5c+e0YMECLViwIMV4SEiImjZtatdz3v7QOXjw4Psegbq7xN3p999/V8uWLVW/fn19+eWX8vf3V/bs2TVnzpx7LgBx5xGmOxmGYVfuh3F2draWD3vdeaTxTnce3XmUPPdy535/99136tatm1q1aqUhQ4bIx8fHumDF7fInST4+Ptq7d6/WrFmjX375Rb/88ovmzJmjLl26aN68eZJuva7PPPOMhg4des+f+9RTTz0w7+0jUS+//PI9xzdu3Gg9SpvafTx58qSaNGmiUqVKaeLEiSpUqJBcXFy0atUqTZo06aEFqEuXLvrss8+0dOlSdejQQfPnz7cuNnJb/fr1dfLkSf38889au3atZs6cqUmTJik4OFg9evS45/O6u7tr06ZN2rBhg1auXKnVq1dr4cKFaty4sdauXXvf/QKA9EIhA4AMKiQkRD4+Pvriiy9SjC1evFhLlixRcHCw3N3dVaRIEW3YsEFXrlyxOUp29z3Lbh8xyp49+yMVmJ9++klubm5as2aNXF1drdvnzJlj93NJUv78+eXu7n7PU86OHj36SM95P3ny5FFMTIzNtuvXr+vcuXOp+v7bp14ePHjwgaU1tX788Uc9+eSTWrx4sc3RtNtHKu/k4uKi559/Xs8//7ySk5PVp08fffXVV3r//fdVvHhxFStWTPHx8Y/0miYkJOjnn39Wu3bt1LZt2xTjb731lkJCQlIUsodZvny5EhMTtWzZMpujafdaRfJeypUrp8qVKyskJEQFCxZURESEpk2blmKet7e3Xn31Vb366quKj49X/fr19eGHH963kEm3jsA1adJETZo00cSJEzVq1Ci9++672rBhwyMXewB4VJyyCAAZ0NWrV7V48WK1aNFCbdu2TfHVr18/xcXFWZeqDwoK0o0bNzRjxgzrcyQnJ6cocz4+PmrYsKG++uqrexaR8+fPPzCXs7OzLBaLzVGlP//8U0uXLn2k/XR2dlZQUJCWLl2qiIgI6/bDhw9rzZo1j/Sc91OsWLEU11J9/fXX9z1CdremTZsqd+7cGj16tK5du2Yz9ihH/G4fibnze7dv366wsDCbef/++6/NYycnJ1WoUEGSlJiYKOnWka2wsLB7/s5iYmJ08+bN++ZYsmSJEhIS1Ldv33v+XWvRooV++ukn68/6L/t3+fJlu8r7K6+8orVr12ry5MnKmzevdYXK2+7+3eTKlUvFixd/YNaLFy+m2HZ7RUt79xEA0gJHyAAgA1q2bJni4uLUsmXLe47XrFnTepPodu3aqVWrVqpevboGDRqkEydOqFSpUlq2bJn1w+edR2C++OIL1a1bV+XLl1fPnj315JNPKioqSmFhYfrrr7+0b9++++Zq3ry5Jk6cqGeffVYdO3ZUdHS0vvjiCxUvXvyh1+7cz0cffaTVq1erXr166tOnj27evKlp06apbNmyj/yc99KjRw+98cYbatOmjZ555hnt27dPa9asUb58+VL1/R4eHpo0aZJ69OihatWqqWPHjsqTJ4/27dunK1euWE8fTK0WLVpo8eLFat26tZo3b67Tp08rODhYZcqUUXx8vE3uixcvqnHjxipYsKDOnDmjadOmqVKlSipdurQkaciQIVq2bJlatGihbt26qUqVKkpISNCBAwf0448/6s8//7zvfoaEhChv3ryqXbv2PcdbtmypGTNmaOXKlXrxxRdTvX9Nmza1Htnr1auX4uPjNWPGDPn4+KT6qGTHjh01dOhQLVmyRL1791b27NltxsuUKaOGDRuqSpUq8vb21q5du/Tjjz+qX79+933OkSNHatOmTWrevLmKFCmi6OhoffnllypYsKDq1q2b6v0DgDRj4gqPAID7eP755w03NzcjISHhvnO6detmZM+e3bhw4YJhGIZx/vx5o2PHjkbu3LkNT09Po1u3bsaWLVsMScaCBQtsvvfkyZNGly5dDD8/PyN79uxGgQIFjBYtWhg//vjjQ7PNmjXLKFGihOHq6mqUKlXKmDNnToqlxQ3j1jLzffv2TfH9dy8zbxiGsXHjRqNKlSqGi4uL8eSTTxrBwcH3fM57ub3s/cMkJSUZ77zzjpEvXz4jR44cRlBQkHHixIn7Lnu/c+fOez7PsmXLjNq1axvu7u6Gh4eHUb16deP777+3jjdo0MAoW7bsPXMWKVLE+jg5OdkYNWqUUaRIEcPV1dWoXLmysWLFihTzfvzxR6Np06aGj4+P4eLiYhQuXNjo1auXce7cOZvnj4uLM4YPH24UL17ccHFxMfLly2fUrl3bGD9+vHH9+vV77ktUVJSRLVs245VXXrnv7+3KlStGjhw5jNatWxuG8f+Xkb972fjbv7fTp0/b/K4qVKhguLm5GU888YQxduxYY/bs2Snm3b3s/Z2aNWtmSDK2bt2aYuyTTz4xqlevbnh5eRnu7u5GqVKljE8//dRmf+/+e7Ru3TrjhRdeMAICAgwXFxcjICDA6NChQ4pbBgDA42IxjDS+shoAkGEsXbpUrVu31ubNm1WnTh2z4wB2a926tQ4cOJDiekgAcBRcQwYADuLq1as2j5OSkjRt2jR5eHjo6aefNikV8OjOnTunlStX6pVXXjE7CgCkG64hAwAH8eabb+rq1auqVauWEhMTtXjxYm3dulWjRo36T0u4A4/b6dOntWXLFs2cOVPZs2dXr169zI4EAOmGQgYADqJx48aaMGGCVqxYoWvXrql48eKaNm3aAxc4ADKijRs36tVXX1XhwoU1b948+fn5mR0JANKNqacsbtq0Sc8//7wCAgJksVhSLJtsGIZGjBghf39/ubu7KzAwMMW9ai5evKhOnTrJw8NDXl5e6t69u83qVJK0f/9+1atXT25ubipUqJDGjRuXIssPP/ygUqVKyc3NTeXLl9eqVavSfH8BID117NhR4eHhunz5shITE3Xo0CHKGDKlbt26yTAMnTlz5p73RgMAR2JqIUtISFDFihXvedNTSRo3bpymTp2q4OBgbd++XTlz5lRQUJDN/V86deqkQ4cOKTQ0VCtWrNCmTZv0+uuvW8djY2PVtGlTFSlSROHh4frss8/04Ycf6uuvv7bO2bp1qzp06KDu3btrz549atWqlVq1aqWDBw+m384DAAAAyPIyzCqLFotFS5YsUatWrSTdOjoWEBCgQYMGafDgwZJu3VDS19dXc+fOVfv27XX48GGVKVNGO3fuVNWqVSVJq1evVrNmzfTXX38pICBA06dP17vvvqvIyEi5uLhIkoYNG6alS5fqyJEjkqR27dopISFBK1assOapWbOmKlWqpODg4Mf4WwAAAACQlWTYa8hOnz6tyMhIBQYGWrd5enqqRo0aCgsLU/v27RUWFiYvLy9rGZOkwMBAOTk5afv27WrdurXCwsJUv359axmTpKCgII0dO1aXLl1Snjx5FBYWpoEDB9r8/KCgoBSnUN4pMTFRiYmJ1sfJycm6ePGi8ubNa3MDVgAAAABZi2EYiouLU0BAgJycHnxSYoYtZJGRkZIkX19fm+2+vr7WscjISPn4+NiMZ8uWTd7e3jZzihYtmuI5bo/lyZNHkZGRD/w59zJ69Gh99NFHj7BnAAAAALKCs2fPqmDBgg+ck2ELWUY3fPhwm6Nqly9fVuHChXX27Fl5eHiYmAwAAACAmWJjY1WoUCHlzp37oXMzbCG7vcRtVFSU/P39rdujoqJUqVIl65zo6Gib77t586YuXrxo/X4/Pz9FRUXZzLn9+GFzHrTMrqurq1xdXVNs9/DwoJABAAAASNWlTKausvggRYsWlZ+fn9atW2fdFhsbq+3bt6tWrVqSpFq1aikmJkbh4eHWOevXr1dycrJq1KhhnbNp0ybduHHDOic0NFQlS5ZUnjx5rHPu/Dm359z+OQAAAACQHkwtZPHx8dq7d6/27t0r6dZCHnv37lVERIQsFov69++vTz75RMuWLdOBAwfUpUsXBQQEWFdiLF26tJ599ln17NlTO3bs0JYtW9SvXz+1b99eAQEBkm7dl8fFxUXdu3fXoUOHtHDhQk2ZMsXmdMO3335bq1ev1oQJE3TkyBF9+OGH2rVrF/fvAQAAAJCuTF32/rffflOjRo1SbO/atavmzp0rwzD0wQcf6Ouvv1ZMTIzq1q2rL7/8Uk899ZR17sWLF9WvXz8tX75cTk5OatOmjaZOnapcuXJZ5+zfv199+/bVzp07lS9fPr355pt65513bH7mDz/8oPfee09//vmnSpQooXHjxqlZs2ap3pfY2Fh5enrq8uXLnLIIAAAAZGH2dIMMcx+yzI5CBgAAAECyrxtk2GvIAAAAAMDRUcgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADBJNrMDAAAAwLGM2XPB7AjpaljlfGZHgAPhCBkAAAAAmIRCBgAAAAAmoZABAAAAgEkoZAAAAABgEgoZAAAAAJiEQgYAAAAAJqGQAQAAAIBJuA8ZAMDhOfI9kbgfEoC0xH8vHz+OkAEAAACASShkAAAAAGASTlkEgFRy5NM4pIx7KgcAAI6MQgYAADIsR/6HEP4RBIDEKYsAAAAAYBqOkAEm4F98AQAAIHGEDAAAAABMQyEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCTeGzsS4uTAAAACQuXGEDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQZupAlJSXp/fffV9GiReXu7q5ixYrp448/lmEY1jmGYWjEiBHy9/eXu7u7AgMDdfz4cZvnuXjxojp16iQPDw95eXmpe/fuio+Pt5mzf/9+1atXT25ubipUqJDGjRv3WPYRAAAAQNaVoQvZ2LFjNX36dH3++ec6fPiwxo4dq3HjxmnatGnWOePGjdPUqVMVHBys7du3K2fOnAoKCtK1a9esczp16qRDhw4pNDRUK1as0KZNm/T6669bx2NjY9W0aVMVKVJE4eHh+uyzz/Thhx/q66+/fqz7CwAAACBryWZ2gAfZunWrXnjhBTVv3lyS9MQTT+j777/Xjh07JN06OjZ58mS99957euGFFyRJ33zzjXx9fbV06VK1b99ehw8f1urVq7Vz505VrVpVkjRt2jQ1a9ZM48ePV0BAgEJCQnT9+nXNnj1bLi4uKlu2rPbu3auJEyfaFDcAAAAASEsZ+ghZ7dq1tW7dOh07dkyStG/fPm3evFnPPfecJOn06dOKjIxUYGCg9Xs8PT1Vo0YNhYWFSZLCwsLk5eVlLWOSFBgYKCcnJ23fvt06p379+nJxcbHOCQoK0tGjR3Xp0qV7ZktMTFRsbKzNFwAAAADYI0MfIRs2bJhiY2NVqlQpOTs7KykpSZ9++qk6deokSYqMjJQk+fr62nyfr6+vdSwyMlI+Pj4249myZZO3t7fNnKJFi6Z4jttjefLkSZFt9OjR+uijj9JgLwEAAABkVRn6CNmiRYsUEhKi+fPna/fu3Zo3b57Gjx+vefPmmR1Nw4cP1+XLl61fZ8+eNTsSAAAAgEwmQx8hGzJkiIYNG6b27dtLksqXL68zZ85o9OjR6tq1q/z8/CRJUVFR8vf3t35fVFSUKlWqJEny8/NTdHS0zfPevHlTFy9etH6/n5+foqKibObcfnx7zt1cXV3l6ur633cSAAAAQJaVoY+QXblyRU5OthGdnZ2VnJwsSSpatKj8/Py0bt0663hsbKy2b9+uWrVqSZJq1aqlmJgYhYeHW+esX79eycnJqlGjhnXOpk2bdOPGDeuc0NBQlSxZ8p6nKwIAAABAWsjQhez555/Xp59+qpUrV+rPP//UkiVLNHHiRLVu3VqSZLFY1L9/f33yySdatmyZDhw4oC5duiggIECtWrWSJJUuXVrPPvusevbsqR07dmjLli3q16+f2rdvr4CAAElSx44d5eLiou7du+vQoUNauHChpkyZooEDB5q16wAAAACygAx9yuK0adP0/vvvq0+fPoqOjlZAQIB69eqlESNGWOcMHTpUCQkJev311xUTE6O6detq9erVcnNzs84JCQlRv3791KRJEzk5OalNmzaaOnWqddzT01Nr165V3759VaVKFeXLl08jRoxgyXsAAAAA6SpDF7LcuXNr8uTJmjx58n3nWCwWjRw5UiNHjrzvHG9vb82fP/+BP6tChQr6/fffHzUqAAAAANgtQ5+yCAAAAACOjEIGAAAAACahkAEAAACASShkAAAAAGASChkAAAAAmIRCBgAAAAAmoZABAAAAgEkoZAAAAABgEgoZAAAAAJiEQgYAAAAAJqGQAQAAAIBJKGQAAAAAYBIKGQAAAACYhEIGAAAAACahkAEAAACASShkAAAAAGASChkAAAAAmIRCBgAAAAAmsbuQRUREyDCMFNsNw1BERESahAIAAACArMDuQla0aFGdP38+xfaLFy+qaNGiaRIKAAAAALICuwuZYRiyWCwptsfHx8vNzS1NQgEAAABAVpAttRMHDhwoSbJYLHr//feVI0cO61hSUpK2b9+uSpUqpXlAAAAAAHBUqS5ke/bskXTrCNmBAwfk4uJiHXNxcVHFihU1ePDgtE8IAAAAAA4q1YVsw4YNkqRXX31VU6ZMkYeHR7qFAgAAAICsINWF7LY5c+akRw4AAAAAyHLsLmQJCQkaM2aM1q1bp+joaCUnJ9uMnzp1Ks3CAQAAAIAjs7uQ9ejRQxs3btQrr7wif3//e664CAAAAAB4OLsL2S+//KKVK1eqTp066ZEHAAAAALIMu+9DlidPHnl7e6dHFgAAAADIUuwuZB9//LFGjBihK1eupEceAAAAAMgy7D5lccKECTp58qR8fX31xBNPKHv27Dbju3fvTrNwAAAAAODI7C5krVq1SocYAAAAAJD12F3IPvjgg/TIAQAAAABZjt3XkAEAAAAA0obdR8icnJweeO+xpKSk/xQIAAAAALIKuwvZkiVLbB7fuHFDe/bs0bx58/TRRx+lWTAAAAAAcHR2F7IXXnghxba2bduqbNmyWrhwobp3754mwQAAAADA0aXZNWQ1a9bUunXr0urpAAAAAMDhpUkhu3r1qqZOnaoCBQqkxdMBAAAAQJZg9ymLefLksVnUwzAMxcXFKUeOHPruu+/SNBwAAAAAODK7C9nkyZNtHjs5OSl//vyqUaOG8uTJk1a5AAAAAMDh2V3Iunbtmh45AAAAACDLsbuQSVJMTIxmzZqlw4cPS5LKli2r1157TZ6enmkaDgAAAAAcmd2LeuzatUvFihXTpEmTdPHiRV28eFETJ05UsWLFtHv37vTICAAAAAAOye4jZAMGDFDLli01Y8YMZct269tv3rypHj16qH///tq0aVOahwQAAAAAR2R3Idu1a5dNGZOkbNmyaejQoapatWqahgMAAAAAR2b3KYseHh6KiIhIsf3s2bPKnTt3moQCAAAAgKzA7kLWrl07de/eXQsXLtTZs2d19uxZLViwQD169FCHDh3SIyMAAAAAOCS7T1kcP368LBaLunTpops3b0qSsmfPrt69e2vMmDFpHhAAAAAAHJXdhczFxUVTpkzR6NGjdfLkSUlSsWLFlCNHjjQPBwAAAACO7JHuQyZJOXLkUPny5dMyCwAAAABkKXYXsmvXrmnatGnasGGDoqOjlZycbDPOvcgAAAAAIHXsLmTdu3fX2rVr1bZtW1WvXl0WiyU9cgEAAACAw7O7kK1YsUKrVq1SnTp10iMPAAAAAGQZdi97X6BAAe43BgAAAABpwO5CNmHCBL3zzjs6c+ZMeuQBAAAAgCzD7lMWq1atqmvXrunJJ59Ujhw5lD17dpvxixcvplk4AAAAAHBkdheyDh066O+//9aoUaPk6+vLoh4AAAAA8IjsLmRbt25VWFiYKlasmB55AAAAACDLsPsaslKlSunq1avpkQUAAAAAshS7C9mYMWM0aNAg/fbbb/r3338VGxtr8wUAAAAASB27T1l89tlnJUlNmjSx2W4YhiwWi5KSktImGQAAAAA4OLsL2YYNG9IjBwAAAABkOXYXsgYNGtx37ODBg/8pDAAAAABkJXZfQ3a3uLg4ff3116pevTorLwIAAACAHR65kG3atEldu3aVv7+/xo8fr8aNG2vbtm1pmQ0AAAAAHJpdhSwyMlJjxoxRiRIl9NJLL8nDw0OJiYlaunSpxowZo2rVqqV5wL///ludO3dW3rx55e7urvLly2vXrl3WccMwNGLECPn7+8vd3V2BgYE6fvy4zXNcvHhRnTp1koeHh7y8vNS9e3fFx8fbzNm/f7/q1asnNzc3FSpUSOPGjUvzfQEAAACAO6W6kD3//PMqWbKk9u/fr8mTJ+uff/7RtGnT0jObLl26pDp16ih79uz65Zdf9Mcff2jChAnKkyePdc64ceM0depUBQcHa/v27cqZM6eCgoJ07do165xOnTrp0KFDCg0N1YoVK7Rp0ya9/vrr1vHY2Fg1bdpURYoUUXh4uD777DN9+OGH+vrrr9N1/wAAAABkbale1OOXX37RW2+9pd69e6tEiRLpmclq7NixKlSokObMmWPdVrRoUeufDcPQ5MmT9d577+mFF16QJH3zzTfy9fXV0qVL1b59ex0+fFirV6/Wzp07VbVqVUnStGnT1KxZM40fP14BAQEKCQnR9evXNXv2bLm4uKhs2bLau3evJk6caFPcAAAAACAtpfoI2ebNmxUXF6cqVaqoRo0a+vzzz3XhwoX0zKZly5apatWqeumll+Tj46PKlStrxowZ1vHTp08rMjJSgYGB1m2enp6qUaOGwsLCJElhYWHy8vKyljFJCgwMlJOTk7Zv326dU79+fbm4uFjnBAUF6ejRo7p06dI9syUmJnJTbAAAAAD/SaoLWc2aNTVjxgydO3dOvXr10oIFCxQQEKDk5GSFhoYqLi4uzcOdOnVK06dPV4kSJbRmzRr17t1bb731lubNmyfp1jVtkuTr62vzfb6+vtaxyMhI+fj42Ixny5ZN3t7eNnPu9Rx3/oy7jR49Wp6entavQoUK/ce9BQAAAJDV2L3KYs6cOfXaa69p8+bNOnDggAYNGqQxY8bIx8dHLVu2TNNwycnJevrppzVq1ChVrlxZr7/+unr27Kng4OA0/TmPYvjw4bp8+bL16+zZs2ZHAgAAAJDJ/Kf7kJUsWVLjxo3TX3/9pe+//z6tMln5+/urTJkyNttKly6tiIgISZKfn58kKSoqymZOVFSUdczPz0/R0dE24zdv3tTFixdt5tzrOe78GXdzdXWVh4eHzRcAAAAA2OM/3xhakpydndWqVSstW7YsLZ7Oqk6dOjp69KjNtmPHjqlIkSKSbi3w4efnp3Xr1lnHY2NjtX37dtWqVUuSVKtWLcXExCg8PNw6Z/369UpOTlaNGjWsczZt2qQbN25Y54SGhqpkyZI2KzoCAAAAQFpKk0KWXgYMGKBt27Zp1KhROnHihObPn6+vv/5affv2lSRZLBb1799fn3zyiZYtW6YDBw6oS5cuCggIUKtWrSTdOqL27LPPqmfPntqxY4e2bNmifv36qX379goICJAkdezYUS4uLurevbsOHTqkhQsXasqUKRo4cKBZuw4AAAAgC0j1svdmqFatmpYsWaLhw4dr5MiRKlq0qCZPnqxOnTpZ5wwdOlQJCQl6/fXXFRMTo7p162r16tVyc3OzzgkJCVG/fv3UpEkTOTk5qU2bNpo6dap13NPTU2vXrlXfvn1VpUoV5cuXTyNGjGDJewAAAADpKkMXMklq0aKFWrRocd9xi8WikSNHauTIkfed4+3trfnz5z/w51SoUEG///77I+cEAAAAAHtl6FMWAQAAAMCRPVIh+/bbb1WnTh0FBATozJkzkqTJkyfr559/TtNwAAAAAODI7C5k06dP18CBA9WsWTPFxMQoKSlJkuTl5aXJkyendT4AAAAAcFh2F7Jp06ZpxowZevfdd+Xs7GzdXrVqVR04cCBNwwEAAACAI7O7kJ0+fVqVK1dOsd3V1VUJCQlpEgoAAAAAsgK7C1nRokW1d+/eFNtXr16t0qVLp0UmAAAAAMgS7F72fuDAgerbt6+uXbsmwzC0Y8cOff/99xo9erRmzpyZHhkBAAAAwCHZXch69Oghd3d3vffee7py5Yo6duyogIAATZkyRe3bt0+PjAAAAADgkB7pxtCdOnVSp06ddOXKFcXHx8vHxyetcwEAAACAw7P7GrKrV6/qypUrkqQcOXLo6tWrmjx5stauXZvm4QAAAADAkdldyF544QV98803kqSYmBhVr15dEyZM0AsvvKDp06eneUAAAAAAcFR2F7Ldu3erXr16kqQff/xRfn5+OnPmjL755htNnTo1zQMCAAAAgKOyu5BduXJFuXPnliStXbtWL774opycnFSzZk2dOXMmzQMCAAAAgKOyu5AVL15cS5cu1dmzZ7VmzRo1bdpUkhQdHS0PD480DwgAAAAAjsruQjZixAgNHjxYTzzxhGrUqKFatWpJunW0rHLlymkeEAAAAAAcld3L3rdt21Z169bVuXPnVLFiRev2Jk2aqHXr1mkaDgAAAAAc2SPdh8zPz09+fn4226pXr54mgQAAAAAgq3ikQrZr1y4tWrRIERERun79us3Y4sWL0yQYAAAAADg6u68hW7BggWrXrq3Dhw9ryZIlunHjhg4dOqT169fL09MzPTICAAAAgEOyu5CNGjVKkyZN0vLly+Xi4qIpU6boyJEjevnll1W4cOH0yAgAAAAADsnuQnby5Ek1b95ckuTi4qKEhARZLBYNGDBAX3/9dZoHBAAAAABHZXchy5Mnj+Li4iRJBQoU0MGDByVJMTExunLlStqmAwAAAAAHZveiHvXr11doaKjKly+vl156SW+//bbWr1+v0NBQNWnSJD0yAgAAAIBDsruQff7557p27Zok6d1331X27Nm1detWtWnTRu+9916aBwQAAAAAR2V3IfP29rb+2cnJScOGDUvTQAAAAACQVTzSfciSk5N14sQJRUdHKzk52Wasfv36aRIMAAAAAByd3YVs27Zt6tixo86cOSPDMGzGLBaLkpKS0iwcAAAAADgyuwvZG2+8oapVq2rlypXy9/eXxWJJj1wAAAAA4PDsLmTHjx/Xjz/+qOLFi6dHHgAAAADIMuy+D1mNGjV04sSJ9MgCAAAAAFlKqo6Q7d+/3/rnN998U4MGDVJkZKTKly+v7Nmz28ytUKFC2iYEAAAAAAeVqkJWqVIlWSwWm0U8XnvtNeufb4+xqAcAAAAApF6qCtnp06fTOwcAAAAAZDmpKmRFihRJ7xwAAAAAkOXYvajH6NGjNXv27BTbZ8+erbFjx6ZJKAAAAADICuwuZF999ZVKlSqVYnvZsmUVHBycJqEAAAAAICuwu5BFRkbK398/xfb8+fPr3LlzaRIKAAAAALICuwtZoUKFtGXLlhTbt2zZooCAgDQJBQAAAABZQaoW9bhTz5491b9/f924cUONGzeWJK1bt05Dhw7VoEGD0jwgAAAAADgquwvZkCFD9O+//6pPnz66fv26JMnNzU3vvPOOhg8fnuYBAQAAAMBR2VXIkpKStGXLFg0bNkzvv/++Dh8+LHd3d5UoUUKurq7plREAAAAAHJJdhczZ2VlNmzbV4cOHVbRoUVWrVi29cgEAAACAw7N7UY9y5crp1KlT6ZEFAAAAALIUuwvZJ598osGDB2vFihU6d+6cYmNjbb4AAAAAAKlj96IezZo1kyS1bNlSFovFut0wDFksFiUlJaVdOgAAAABwYHYXsg0bNqRHDgAAAADIcuwuZA0aNEiPHAAAAACQ5dhdyDZt2vTA8fr16z9yGAAAAADISuwuZA0bNkyx7c5rybiGDAAAAABSx+5VFi9dumTzFR0drdWrV6tatWpau3ZtemQEAAAAAIdk9xEyT0/PFNueeeYZubi4aODAgQoPD0+TYAAAAADg6Ow+QnY/vr6+Onr0aFo9HQAAAAA4PLuPkO3fv9/msWEYOnfunMaMGaNKlSqlVS4AAAAAcHh2F7JKlSrJYrHIMAyb7TVr1tTs2bPTLBgAAAAAODq7C9np06dtHjs5OSl//vxyc3NLs1AAAAAAkBXYVcj+/PNPhYaG6vr162rYsKHKli2bXrkAAAAAwOGlupBt2LBBLVq00NWrV299Y7Zsmj17tjp37pxu4QAAAADAkaV6lcX3339fzzzzjP7++2/9+++/6tmzp4YOHZqe2QAAAADAoaW6kB08eFCjRo2Sv7+/8uTJo88++0zR0dH6999/0zMfAAAAADisVBey2NhY5cuXz/o4R44ccnd31+XLl9MlGAAAAAA4OrsW9VizZo08PT2tj5OTk7Vu3TodPHjQuq1ly5Zplw4AAAAAHJhdhaxr164ptvXq1cv6Z4vFoqSkpP+eCgAAAACygFQXsuTk5PTMAQAAAABZTqqvIQMAAAAApC0KGQAAAACYhEIGAAAAACbJVIVszJgxslgs6t+/v3XbtWvX1LdvX+XNm1e5cuVSmzZtFBUVZfN9ERERat68uXLkyCEfHx8NGTJEN2/etJnz22+/6emnn5arq6uKFy+uuXPnPoY9AgAAAJCVZZpCtnPnTn311VeqUKGCzfYBAwZo+fLl+uGHH7Rx40b9888/evHFF63jSUlJat68ua5fv66tW7dq3rx5mjt3rkaMGGGdc/r0aTVv3lyNGjXS3r171b9/f/Xo0UNr1qx5bPsHAAAAIOt5pEIWExOjmTNnavjw4bp48aIkaffu3fr777/TNNxt8fHx6tSpk2bMmKE8efJYt1++fFmzZs3SxIkT1bhxY1WpUkVz5szR1q1btW3bNknS2rVr9ccff+i7775TpUqV9Nxzz+njjz/WF198oevXr0uSgoODVbRoUU2YMEGlS5dWv3791LZtW02aNCld9gcAAAAApEcoZPv379dTTz2lsWPHavz48YqJiZEkLV68WMOHD0/rfJKkvn37qnnz5goMDLTZHh4erhs3bthsL1WqlAoXLqywsDBJUlhYmMqXLy9fX1/rnKCgIMXGxurQoUPWOXc/d1BQkPU57iUxMVGxsbE2XwAAAABgD7sL2cCBA9WtWzcdP35cbm5u1u3NmjXTpk2b0jScJC1YsEC7d+/W6NGjU4xFRkbKxcVFXl5eNtt9fX0VGRlpnXNnGbs9fnvsQXNiY2N19erVe+YaPXq0PD09rV+FChV6pP0DAAAAkHXZXch27typXr16pdheoEABa8FJK2fPntXbb7+tkJAQm/KXEQwfPlyXL1+2fp09e9bsSAAAAAAyGbsLmaur6z1Pzzt27Jjy58+fJqFuCw8PV3R0tJ5++mlly5ZN2bJl08aNGzV16lRly5ZNvr6+un79uvW0yduioqLk5+cnSfLz80ux6uLtxw+b4+HhIXd393tmc3V1lYeHh80XAAAAANjD7kLWsmVLjRw5Ujdu3JAkWSwWRURE6J133lGbNm3SNFyTJk104MAB7d271/pVtWpVderUyfrn7Nmza926ddbvOXr0qCIiIlSrVi1JUq1atXTgwAFFR0db54SGhsrDw0NlypSxzrnzOW7Puf0cAAAAAJAestn7DRMmTFDbtm3l4+Ojq1evqkGDBoqMjFStWrX06aefpmm43Llzq1y5cjbbcubMqbx581q3d+/eXQMHDpS3t7c8PDz05ptvqlatWqpZs6YkqWnTpipTpoxeeeUVjRs3TpGRkXrvvffUt29fubq6SpLeeOMNff755xo6dKhee+01rV+/XosWLdLKlSvTdH8AAAAA4E52FzJPT0+FhoZq8+bN2r9/v+Lj4/X000+nWKXwcZk0aZKcnJzUpk0bJSYmKigoSF9++aV13NnZWStWrFDv3r1Vq1Yt5cyZU127dtXIkSOtc4oWLaqVK1dqwIABmjJligoWLKiZM2cqKCjIjF0CAAAAkEXYXchuq1u3rurWrZuWWVLlt99+s3ns5uamL774Ql988cV9v6dIkSJatWrVA5+3YcOG2rNnT1pEBAAAAIBUsbuQTZ069Z7bLRaL3NzcVLx4cdWvX1/Ozs7/ORwAAAAAODK7C9mkSZN0/vx5XblyRXny5JEkXbp0STly5FCuXLkUHR2tJ598Uhs2bODeXAAAAADwAHavsjhq1ChVq1ZNx48f17///qt///1Xx44dU40aNTRlyhRFRETIz89PAwYMSI+8AAAAAOAw7D5C9t577+mnn35SsWLFrNuKFy+u8ePHq02bNjp16pTGjRuX5kvgAwAAAICjsfsI2blz53Tz5s0U22/evKnIyEhJUkBAgOLi4v57OgAAAABwYHYXskaNGqlXr142KxLu2bNHvXv3VuPGjSVJBw4cUNGiRdMuJQAAAAA4ILsL2axZs+Tt7a0qVarI1dVVrq6uqlq1qry9vTVr1ixJUq5cuTRhwoQ0DwsAAAAAjsTua8j8/PwUGhqqI0eO6NixY5KkkiVLqmTJktY5jRo1SruEAAAAAOCgHvnG0KVKlVKpUqXSMgsAAAAAZCmPVMj++usvLVu2TBEREbp+/brN2MSJE9MkGAAAAAA4OrsL2bp169SyZUs9+eSTOnLkiMqVK6c///xThmHo6aefTo+MAAAAAOCQ7F7UY/jw4Ro8eLAOHDggNzc3/fTTTzp79qwaNGigl156KT0yAgAAAIBDsruQHT58WF26dJEkZcuWTVevXlWuXLk0cuRIjR07Ns0DAgAAAICjsruQ5cyZ03rdmL+/v06ePGkdu3DhQtolAwAAAAAHZ/c1ZDVr1tTmzZtVunRpNWvWTIMGDdKBAwe0ePFi1axZMz0yAgAAAIBDsruQTZw4UfHx8ZKkjz76SPHx8Vq4cKFKlCjBCosAAAAAYAe7CllSUpL++usvVahQQdKt0xeDg4PTJRgAAAAAODq7riFzdnZW06ZNdenSpfTKAwAAAABZht2LepQrV06nTp1KjywAAAAAkKXYXcg++eQTDR48WCtWrNC5c+cUGxtr8wUAAAAASB27F/Vo1qyZJKlly5ayWCzW7YZhyGKxKCkpKe3SAQAAAIADs7uQbdiwIT1yAAAAAECWY3cha9CgQXrkAAAAAIAsx+5ryCTp999/V+fOnVW7dm39/fffkqRvv/1WmzdvTtNwAAAAAODI7C5kP/30k4KCguTu7q7du3crMTFRknT58mWNGjUqzQMCAAAAgKN6pFUWg4ODNWPGDGXPnt26vU6dOtq9e3eahgMAAAAAR2Z3ITt69Kjq16+fYrunp6diYmLSIhMAAAAAZAl2FzI/Pz+dOHEixfbNmzfrySefTJNQAAAAAJAV2F3Ievbsqbffflvbt2+XxWLRP//8o5CQEA0ePFi9e/dOj4wAAAAA4JDsXvZ+2LBhSk5OVpMmTXTlyhXVr19frq6uGjx4sN588830yAgAAAAADsnuQmaxWPTuu+9qyJAhOnHihOLj41WmTBnlypUrPfIBAAAAgMOy+5TF7777TleuXJGLi4vKlCmj6tWrU8YAAAAA4BHYXcgGDBggHx8fdezYUatWrVJSUlJ65AIAAAAAh2d3ITt37pwWLFggi8Wil19+Wf7+/urbt6+2bt2aHvkAAAAAwGHZXciyZcumFi1aKCQkRNHR0Zo0aZL+/PNPNWrUSMWKFUuPjAAAAADgkOxe1ONOOXLkUFBQkC5duqQzZ87o8OHDaZULAAAAABye3UfIJOnKlSsKCQlRs2bNVKBAAU2ePFmtW7fWoUOH0jofAAAAADgsu4+QtW/fXitWrFCOHDn08ssv6/3331etWrXSIxsAAAAAODS7C5mzs7MWLVqkoKAgOTs724wdPHhQ5cqVS7NwAAAAAODI7C5kISEhNo/j4uL0/fffa+bMmQoPD2cZfAAAAABIpUe6hkySNm3apK5du8rf31/jx49X48aNtW3btrTMBgAAAAAOza4jZJGRkZo7d65mzZql2NhYvfzyy0pMTNTSpUtVpkyZ9MoIAAAAAA4p1UfInn/+eZUsWVL79+/X5MmT9c8//2jatGnpmQ0AAAAAHFqqj5D98ssveuutt9S7d2+VKFEiPTMBAAAAQJaQ6iNkmzdvVlxcnKpUqaIaNWro888/14ULF9IzGwAAAAA4tFQXspo1a2rGjBk6d+6cevXqpQULFiggIEDJyckKDQ1VXFxceuYEAAAAAIdj9yqLOXPm1GuvvabNmzfrwIEDGjRokMaMGSMfHx+1bNkyPTICAAAAgEN65GXvJalkyZIaN26c/vrrL33//fdplQkAAAAAsoT/VMhuc3Z2VqtWrbRs2bK0eDoAAAAAyBLSpJABAAAAAOxHIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMkqEL2ejRo1WtWjXlzp1bPj4+atWqlY4ePWoz59q1a+rbt6/y5s2rXLlyqU2bNoqKirKZExERoebNmytHjhzy8fHRkCFDdPPmTZs5v/32m55++mm5urqqePHimjt3bnrvHgAAAIAsLkMXso0bN6pv377atm2bQkNDdePGDTVt2lQJCQnWOQMGDNDy5cv1ww8/aOPGjfrnn3/04osvWseTkpLUvHlzXb9+XVu3btW8efM0d+5cjRgxwjrn9OnTat68uRo1aqS9e/eqf//+6tGjh9asWfNY9xcAAABA1pLN7AAPsnr1apvHc+fOlY+Pj8LDw1W/fn1dvnxZs2bN0vz589W4cWNJ0pw5c1S6dGlt27ZNNWvW1Nq1a/XHH3/o119/la+vrypVqqSPP/5Y77zzjj788EO5uLgoODhYRYsW1YQJEyRJpUuX1ubNmzVp0iQFBQU99v0GAAAAkDVk6CNkd7t8+bIkydvbW5IUHh6uGzduKDAw0DqnVKlSKly4sMLCwiRJYWFhKl++vHx9fa1zgoKCFBsbq0OHDlnn3Pkct+fcfo57SUxMVGxsrM0XAAAAANgj0xSy5ORk9e/fX3Xq1FG5cuUkSZGRkXJxcZGXl5fNXF9fX0VGRlrn3FnGbo/fHnvQnNjYWF29evWeeUaPHi1PT0/rV6FChf7zPgIAAADIWjJNIevbt68OHjyoBQsWmB1FkjR8+HBdvnzZ+nX27FmzIwEAAADIZDL0NWS39evXTytWrNCmTZtUsGBB63Y/Pz9dv35dMTExNkfJoqKi5OfnZ52zY8cOm+e7vQrjnXPuXpkxKipKHh4ecnd3v2cmV1dXubq6/ud9AwAAAJB1ZegjZIZhqF+/flqyZInWr1+vokWL2oxXqVJF2bNn17p166zbjh49qoiICNWqVUuSVKtWLR04cEDR0dHWOaGhofLw8FCZMmWsc+58jttzbj8HAAAAAKSHDH2ErG/fvpo/f75+/vln5c6d23rNl6enp9zd3eXp6anu3btr4MCB8vb2loeHh958803VqlVLNWvWlCQ1bdpUZcqU0SuvvKJx48YpMjJS7733nvr27Ws9wvXGG2/o888/19ChQ/Xaa69p/fr1WrRokVauXGnavgMAAABwfBn6CNn06dN1+fJlNWzYUP7+/tavhQsXWudMmjRJLVq0UJs2bVS/fn35+flp8eLF1nFnZ2etWLFCzs7OqlWrljp37qwuXbpo5MiR1jlFixbVypUrFRoaqooVK2rChAmaOXMmS94DAAAASFcZ+giZYRgPnePm5qYvvvhCX3zxxX3nFClSRKtWrXrg8zRs2FB79uyxOyMAAAAAPKoMfYQMAAAAABwZhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADAJhQwAAAAATEIhAwAAAACTUMgAAAAAwCQUMgAAAAAwCYUMAAAAAExCIbvLF198oSeeeEJubm6qUaOGduzYYXYkAAAAAA6KQnaHhQsXauDAgfrggw+0e/duVaxYUUFBQYqOjjY7GgAAAAAHRCG7w8SJE9WzZ0+9+uqrKlOmjIKDg5UjRw7Nnj3b7GgAAAAAHFA2swNkFNevX1d4eLiGDx9u3ebk5KTAwECFhYWlmJ+YmKjExETr48uXL0uSYmNj0z/s/7kWH/fYftbjFhvrYnaEdMVrlzk58usm8dplVo78ukm8dpmVI79uEq9dZvU4X7fbncAwjIfOpZD9nwsXLigpKUm+vr422319fXXkyJEU80ePHq2PPvooxfZChQqlW8asJOVvFpkFr13mxWuXOfG6ZV68dpkXr13mZMbrFhcXJ09PzwfOoZA9ouHDh2vgwIHWx8nJybp48aLy5s0ri8ViYrL0ERsbq0KFCuns2bPy8PAwOw5Sidct8+K1y7x47TInXrfMi9cu83Lk184wDMXFxSkgIOChcylk/ydfvnxydnZWVFSUzfaoqCj5+fmlmO/q6ipXV1ebbV5eXukZMUPw8PBwuDdMVsDrlnnx2mVevHaZE69b5sVrl3k56mv3sCNjt7Gox/9xcXFRlSpVtG7dOuu25ORkrVu3TrVq1TIxGQAAAABHxRGyOwwcOFBdu3ZV1apVVb16dU2ePFkJCQl69dVXzY4GAAAAwAFRyO7Qrl07nT9/XiNGjFBkZKQqVaqk1atXp1joIytydXXVBx98kOI0TWRsvG6ZF69d5sVrlznxumVevHaZF6/dLRYjNWsxAgAAAADSHNeQAQAAAIBJKGQAAAAAYBIKGQAAAACYhEIGAAAAACahkAEAAACASShksHHhwgWzIwAA8FglJiYqMTHR7BgAsigKGWz4+vqqSZMmmj9/Pv/nBDwm0dHRNo/37t2rrl27qk6dOmrbtq1+++03c4IBDiw0NFTNmjVTnjx5lCNHDuXIkUN58uRRs2bN9Ouvv5odD0AWQiGDDcMw5OLioldffVX+/v568803tXfvXrNjIZV27NihpKQk6+MVK1aoQYMGKlCggKpWrapvvvnGxHS4H39/f2sp27p1q6pXr64zZ86oTp06io2N1TPPPKNNmzaZnBL3QpnOnObNm6dmzZrJ09NTkyZN0ooVK7RixQpNmjRJXl5eatasmb799luzY+IeeM85lj59+nB2lrgxNO7i5OSkyMhIOTk5ad68eZo9e7aOHDmiSpUqqUePHurUqZM8PDzMjon7cHZ21rlz5+Tj46Ply5erVatW6ty5s2rUqKE9e/Zo7ty5WrRokVq3bm12VNzh9vvOx8dHTZs2VaFChTRr1izreP/+/XXgwAGtW7fOxJS4lzvfc1u3blXDhg1Vu3ZtVa9eXXv37tWGDRu0bt061a9f3+youMNTTz2lt99+W3379r3n+JdffqlJkybp+PHjjzkZHob3nGPx8PDQ3r179eSTT5odxVQUMti484PhbWFhYZo5c6Z++OEHJSUlqU2bNhxpyaDufP3q1aununXravTo0dbxUaNGafny5QoLCzMxJe525+sWEBCgxYsXq2bNmtbxQ4cOqWHDhjp//ryJKXEvlOnMyc3NTfv27VPJkiXvOX706FFVqlRJV69efczJ8DC85xxL7ty5tW/fvixfyDhlETYsFkuKbbVq1dKsWbN07tw5TZ06VSdPnjQhGex17NgxtW3b1mZbmzZtdOTIEZMS4UHi4uIUGxsrNzc3ubq62oy5ubnpypUrJiVDah08eFA9e/a02dazZ0/t37/fpES4n7Jly9p8iL/b7NmzVaZMmceYCI+C95xjuNdnz6wmm9kBkLE86IBpzpw51b17d3Xv3v0xJoK9/vjjD0VGRsrd3V3Jyckpxm/evGlCKjzMU089JenWe3DXrl2qXLmydezQoUMKCAgwKxoeIi4uTm5ubpTpTGTChAlq0aKFVq9ercDAQPn6+kqSoqKitG7dOp06dUorV640OSXuh/dc5lW0aFGbAnb16lU1aNBA2bL9/0py6tQpM6KZikIGG3PmzJGnp6fZMfAfNGnSxFqst2zZomrVqlnH9uzZo8KFC5sVDfexYcMGm8f+/v42j0+fPq3XX3/9cUaCHSjTmU/Dhg118OBBTZ8+Xdu2bVNkZKQkyc/PT88995zeeOMNPfHEE+aGxH3xnsu85s6da/2zYRhq1qyZxowZowIFCpgXKgPgGjLAgZw5c8bmca5cuZQ3b17r49vX/nXp0uWx5gIc1caNG20e+/v7Wz8sStKUKVN0/fp1DRky5HFHAxwS7znHwjVkt1DIYJeEhASFh4ezehHwGERFRSkxMZGjmsBjcuPGDWXPnt3sGECWwSqLt7CoB+xy4sQJNWrUyOwYgEOJi4tT586dVaRIEXXt2lXXr19X37595e/vr6JFi6pBgwaKjY01Oybs8NFHH3FvnQxs0aJFun79uvXx559/riJFisjNzU358uXTyJEjTUyHR3Hjxg2zI+ARcFzoFgoZ4EBu3LihoUOHqnjx4qpevbpmz55tMx4VFSVnZ2eT0uF+/ve//yk8PFyDBw9WRESEXn75ZW3atEm///67NmzYoAsXLmjs2LFmx8Q9xMbGpvi6fPmyPv30U506dcq6DRlLhw4dFBMTI+nWtdNDhgxRt27dtHz5cg0YMEDjxo3TzJkzzQ2Je6JMO5a4uLgsf3RM4pRF3MXb2/uB40lJSYqPj1dSUtJjSgR7fPjhhwoODtbgwYMVExOjzz//XO3atdNXX30l6VYh8/f3v+fqizBP4cKFNW/ePDVq1Ej//POPChYsqGXLlqlFixaSpJUrV2rQoEHcsiADut8/cBiGIYvFYv1f/puZsdx5L6saNWqobdu2NtccTZ8+XTNmzNDu3btNTIl7ufPG0HPmzFGfPn00dOhQ1ahRQ3v27NHo0aM1efJk9ejRw+yoQKpRyGAjZ86c6t27t8qXL3/P8TNnzuijjz7iw0UGVaJECU2aNMn6Qf7EiRN67rnnVLduXc2ePVvR0dEKCAjg9ctg3NzcdPz4cRUqVEjSrffhnj17rBeqnzlzRmXKlFFCQoKZMXEPBQsWVKVKlTRo0CA5Od066cQwDAUGBmrmzJkqWrSoJKlBgwZmxsRdnJycFBUVpfz58yt//vz69ddfVbFiRev4yZMnVblyZY5uZkCUacdy+vRpnThxQv7+/ipXrpzZcUzDsvewUalSJRUqVEhdu3a95/i+ffv00UcfPeZUSK2///7b5j9oxYsX12+//abGjRvrlVde0bhx40xMh/vJmzevzp8/by1kL7zwgry8vKzj8fHxKe61g4xh//796t69uz7++GN9++231qWbLRaLqlevzs2FM7DVq1fL09PznvetunbtGjerzcBuvzanTp1S06ZNbcaaNm2qd955x4xYeIg+ffpo3LhxypUrl65evapXXnlFS5YssZ5J0KBBAy1btky5cuUyO+pjxzVksNG8eXPrefX34u3tzZLpGZifn59Onjxps61AgQLasGGDdu7cqW7dupkTDA9UoUIF7dy50/p4/vz58vHxsT7euXOnSpcubUY0PIS3t7eWLFmil156SdWrV9f3339vdiSkUteuXdWqVSv9/fffWr9+vc3Ytm3bVKxYMZOS4WFWr16tZcuWUaYzma+++sr6en388cfavn27fv31V8XHx2vTpk2KiIjQp59+anJKc3DKIuBAevToIcMwNGvWrBRjf//9txo2bKhTp05xymIGc/HiRTk5OdkcFbvTL7/8Ind3dzVs2PCx5oJ9/vjjD3Xs2FFlypTRDz/8oH379nGELJNasWKFsmfPrqCgILOj4C63Tw2+7eOPP9a7775rfTxr1ix98cUXnLKYAd15umn58uX1v//9Tx06dLCOL1u2TEOGDNHRo0dNTGkOChngQM6cOaMjR47c90PEP//8o9DQ0Puekgrgv7l+/bqGDRumDRs2aPHixdZryAA8HpTpjOvuazd/++03lS1b1jp+5swZlS5dOsVRz6yAQoaH4qZ9wONXvnx5rVq1ynpdGYD0xXsOSF9OTk56/fXXlSNHDoWEhOi7777TM888Yx3fvXu3goKCdP78eRNTmoNryPBQdPbMzcPDQ6dOnTI7Buz0559/cqPTTKp8+fI6e/as2TFgJ95zmRfvucyhfv36Onr0qPbs2aMyZcrozJkzNuOrVq2yOWKWlbDKIuDgKNTA48UHe+Dx4j2XOfz2228PHO/YsWOWXXyMQoaH6ty5szw8PMyOAWQp9erVk7u7u9kxgCyD9xzweCUkJGjRokXW+5B16NBBefPmNTuWKShkSOHChQuaPXu2wsLCFBkZKUnq2bOnateurW7duil//vwmJ4Q9KNSZ06pVq8yOgEfEB/vMifdc5sV7LnMoU6aMNm/eLG9vb509e1b16tVTTEyMnnrqKZ08eVIff/yxtm3bliUXQ2JRD9jYuXOngoKClCNHDgUGBsrX11eSFBUVpXXr1unKlStas2aNqlatanJSwHEkJibKyclJ2bNnlySdPHlSs2fPVkREhIoUKaLu3btnyf+DAtIL7zng8btz2fvOnTvr9OnTWrVqlTw9PRUfH6/WrVsrf/78mj9/vtlRHzsKGWzUrFlTFStWVHBwcIobKxqGoTfeeEP79+9XWFiYSQnxMCtWrNCOHTsUFBSkOnXqaP369Ro/frySk5P14osv6vXXXzc7Iu7SsGFD9evXT23bttWWLVvUpEkTlSxZUqVLl9axY8d09OhR/frrr6pVq5bZUXEXPthnTrznHNelS5e0fPlydenSxewouMudhaxYsWIKDg62WWVx69atat++vSIiIkxMaRIDuIObm5tx+PDh+44fPnzYcHNze4yJYI/g4GAjW7ZsRpUqVQwPDw/j22+/NXLnzm306NHD6NWrl+Hu7m5MnjzZ7Ji4i4eHh3Hs2DHDMAyjQYMGxoABA2zG33vvPaNOnTpmRMNDNGjQwPjhhx8MwzCMzZs3G66urkaFChWMdu3aGZUrVzZy5MhhbN261eSUuBvvOce1d+9ew8nJyewYuAeLxWJER0cbhmEYAQEBxoEDB2zG//zzzyz7GZNl72HDz89PO3bsuO/4jh07rKcxIuOZOnWqvvzyS+3atUtLly5Vz549NWbMGM2YMUPBwcH68ssv9dVXX5kdE3dJSkpSUlKSJOnIkSMpbtzdrVs37du3z4xoeIg9e/aoYsWKkqR3331Xffr00b59+7RgwQLt3r1bAwcO1JAhQ0xOibvxnsu8YmNjH/gVFxdndkQ8QJMmTfT0008rNjZWR48etRk7c+YMi3oAkjR48GC9/vrrCg8PV5MmTVJcQzZjxgyNHz/e5JS4n9OnTysoKEiS1KhRIyUlJal+/frW8YYNG6pv375mxcN91KhRQ8uXL1epUqVUrFgx7du3z/ohX5L27t0rb29vExPifu7+YD9lyhSb8W7dumny5MkmJMOD8J7LvLy8vFJcUnEnwzAeOA7zfPDBBzaPc+XKZfN4+fLlqlev3uOMlGFQyGCjb9++ypcvnyZNmqQvv/zS+kHD2dlZVapU0dy5c/Xyyy+bnBL3kzdvXp05c0aFCxfWP//8o5s3byoiIkLlypWTdOtfn/iQkfF88skneu6555SQkKAOHTpo0KBBOn78uEqXLq2jR49q6tSpGj58uNkxcQ98sM+ceM9lXrlz59a7776rGjVq3HP8+PHj6tWr12NOhdS4u5Dd7bPPPntMSTIeFvXAfd24cUMXLlyQJOXLl8960Toyrn79+mnt2rXq2rWrli1bptKlS2v79u2aNGmSLBaLhgwZomrVqmnWrFlmR8VdwsLCNHDgQG3fvt1me0BAgIYMGaK3337bpGR4kLCwMD333HPq37+/8uXLp48++khvvPFGig/2Q4cONTsq7sJ7LnNq1KiRnnvuufu+p/bt26fKlSsrOTn5MScDHh2FDHAgCQkJGjBggMLCwlS7dm1NmzZNU6dO1bvvvqsbN26oQYMGWrhwoXx8fMyOivs4f/68Tp06peTkZPn7++uJJ54wOxIegg/2mdud7zk/Pz9WxczgZsyYoatXr+qtt96653hUVJSCg4MfejQGyEgoZEAWcO3aNd24cUO5c+c2OwrgsCjTmZ+Li4v27dun0qVLmx0FQBbCNWRAFuDm5iY3NzedPXtWH3zwgWbPnm12JNzl6tWrCg8Pl7e3t8qUKWMzdu3aNS1atIj76mRQhw8f1rZt21S7dm3VqFFDR44c0dixY5WYmKjOnTurcePGZkfEXQYOHHjP7UlJSRozZox1pbeJEyc+zlh4BAkJCVq0aJFOnDghf39/dejQIcuu1IfMiyNkQBayb98+Pf3009bFWpAxHDt2TE2bNlVERIQsFovq1q2rBQsWyN/fX9KtU3ACAgJ43TKg1atX64UXXlCuXLl05coVLVmyRF26dFHFihWVnJysjRs3au3atZSyDMbJyUkVK1aUl5eXzfaNGzeqatWqypkzpywWi9avX29OQNxXmTJltHnzZnl7e+vs2bOqX7++Ll26pKeeekonT55UtmzZtG3bNk49RaZCIQMcyLJlyx44furUKQ0aNIgP9hlM69atdePGDc2dO1cxMTHq37+//vjjD/32228qXLgwhSwDq127tho3bqxPPvlECxYsUJ8+fdS7d299+umnkqThw4crPDxca9euNTkp7jRmzBh9/fXXmjlzpk1Zzp49u/bt25fiKDUyDicnJ0VGRsrHx0edO3fW6dOntWrVKnl6eio+Pl6tW7dW/vz5NX/+fLOjAqlGIQMciJOTkywWix70trZYLHywz2B8fX3166+/qnz58pJu3UenT58+WrVqlTZs2KCcOXNSyDIoT09PhYeHq3jx4kpOTparq6t27NihypUrS5IOHjyowMBARUZGmpwUd9u5c6c6d+6s559/XqNHj1b27NkpZJnAnYWsWLFiCg4O1jPPPGMd37p1q9q3b6+IiAgTUwL2cTI7AIC04+/vr8WLFys5OfmeX7t37zY7Iu7h6tWrypbt/1/Sa7FYNH36dD3//PNq0KCBjh07ZmI6PMztm9A6OTnJzc1Nnp6e1rHcuXPr8uXLZkXDA1SrVk3h4eE6f/68qlatqoMHD3JD4Uzi9ut07do166ndtxUoUEDnz583IxbwyChkgAOpUqWKwsPD7zv+sKNnMEepUqW0a9euFNs///xzvfDCC2rZsqUJqZAaTzzxhI4fP259HBYWpsKFC1sfR0REpPjAiIwjV65cmjdvnoYPH67AwECOQmcSTZo00dNPP63Y2FgdPXrUZuzMmTMs6oFMh1UWAQcyZMgQJSQk3He8ePHi2rBhw2NMhNRo3bq1vv/+e73yyispxj7//HMlJycrODjYhGR4mN69e9t8iC9XrpzN+C+//MKCHplA+/btVbduXYWHh6tIkSJmx8ED3H1/sVy5ctk8Xr58uerVq/c4IwH/GdeQAQAAAIBJOGURAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDACAVwsLC5OzsrObNm5sdBQDgQFj2HgCAVOjRo4dy5cqlWbNm6ejRowoICDA7EgDAAXCEDACAh4iPj9fChQvVu3dvNW/eXHPnzrUZX7ZsmUqUKCE3Nzc1atRI8+bNk8ViUUxMjHXO5s2bVa9ePbm7u6tQoUJ66623HngjdwBA1kAhAwDgIRYtWqRSpUqpZMmS6ty5s2bPnq3bJ5icPn1abdu2VatWrbRv3z716tVL7777rs33nzx5Us8++6zatGmj/fv3a+HChdq8ebP69etnxu4AADIQTlkEAOAh6tSpo5dffllvv/22bt68KX9/f/3www9q2LChhg0bppUrV+rAgQPW+e+9954+/fRTXbp0SV5eXurRo4ecnZ311VdfWeds3rxZDRo0UEJCgtzc3MzYLQBABsARMgAAHuDo0aPasWOHOnToIEnKli2b2rVrp1mzZlnHq1WrZvM91atXt3m8b98+zZ07V7ly5bJ+BQUFKTk5WadPn348OwIAyJCymR0AAICMbNasWbp586bNIh6GYcjV1VWff/55qp4jPj5evXr10ltvvZVirHDhwmmWFQCQ+VDIAAC4j5s3b+qbb77RhAkT1LRpU5uxVq1a6fvvv1fJkiW1atUqm7GdO3faPH766af1xx9/qHjx4umeGQCQuXANGQAA97F06VK1a9dO0dHR8vT0tBl75513tH79ei1atEglS5bUgAED1L17d+3du1eDBg3SX3/9pZiYGHl6emr//v2qWbOmXnvtNfXo0UM5c+bUH3/8odDQ0FQfZQMAOCauIQMA4D5mzZqlwMDAFGVMktq0aaNdu3YpLi5OP/74oxYvXqwKFSpo+vTp1lUWXV1dJUkVKlTQxo0bdezYMdWrV0+VK1fWiBEjuJcZAIAjZAAApLVPP/1UwcHBOnv2rNlRAAAZHNeQAQDwH3355ZeqVq2a8ubNqy1btuizzz7jHmMAgFShkAEA8B8dP35cn3zyiS5evKjChQtr0KBBGj58uNmxAACZAKcsAgAAAIBJWNQDAAAAAExCIQMAAAAAk1DIAAAAAMAkFDIAAAAAMAmFDAAAAABMQiEDAAAAAJNQyAAAAADAJBQyAAAAADDJ/wNin4/wU1pM3wAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Group by 'Age' and calculate the mean of 'Purchase'\n",
        "age_purchase = data.groupby(\"Age\")[\"Purchase\"].mean()\n",
        "\n",
        "# Plotting the bar chart\n",
        "age_purchase.plot(kind='bar', figsize=(10, 5), color='skyblue')\n",
        "\n",
        "# Adding title and labels\n",
        "plt.title(\"Age and Purchase Analysis\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Average Purchase Amount\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_ryN4cFTW8cN"
      },
      "source": [
        "Mean puchase rate between the age groups tends to be the same except that the 51-55 age group has a little higher average purchase amount"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "zm_UTwntW8cN",
        "outputId": "49ff4843-072e-4f63-9386-a8d48026dca6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Group by 'Age' and calculate the sum of 'Purchase'\n",
        "age_purchase_sum = data.groupby(\"Age\")['Purchase'].sum()\n",
        "\n",
        "# Plotting the bar chart\n",
        "age_purchase_sum.plot(kind=\"bar\", figsize=(10, 5), color='lightcoral')\n",
        "\n",
        "# Adding title and labels\n",
        "plt.title(\"Age and Purchase Analysis\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Total Purchase Amount\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_hODx1HKW8cN"
      },
      "source": [
        "Total amount spent in purchase is in accordance with the number of purchases made, distributed by age."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W08uQfDHW8cO"
      },
      "source": [
        "### Product_Category_1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "GhkgjELWW8cO",
        "outputId": "59818e42-e1bc-45a7-b3f9-ad3bbbe9c1df"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-21-1a2e2a025657>:5: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=data['Product_Category_1'], palette='coolwarm')  # You can change 'coolwarm' to any other palette\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABdgAAAHWCAYAAABkCutrAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABqDklEQVR4nO3de3zP9eP///trZgdjM6fNK8xCziGnphD2MRINCa2aQ7zz3pxzSk6lhOSU5q130TuUt95vEjWWc8hhWs5LtRxiKLZlYmPP3x/v714/rzbGs83zxW7Xy+V1yZ7Px/P5vL8ee9HLfU+Pl80wDEMAAAAAAAAAAOC2uFkdAAAAAAAAAACAuxEFOwAAAAAAAAAAJlCwAwAAAAAAAABgAgU7AAAAAAAAAAAmULADAAAAAAAAAGACBTsAAAAAAAAAACZQsAMAAAAAAAAAYAIFOwAAAAAAAAAAJlCwAwAAAAAAAABgAgU7AAAA7mo2m00TJ060OgbuYps2bZLNZtOmTZsK/FoTJ06UzWZz2maz2RQdHV3g15akRYsWyWaz6eeff74j1wMAALjXUbADAADAtOyyLvvh5eWlBx54QNHR0Tpz5ozV8fLFu+++q0WLFt3WMZcvX9bMmTPVtGlT+fn5Oc3L999/f9sZtm/frokTJyolJeW2j70bLVu2TM8++6yqVasmm82mxx577JaP/fnnn51ek0WLFlWZMmXUrFkzvfzyyzp+/Hi+5XzjjTe0cuXKfDtffnLlbAAAAPcSm2EYhtUhAAAAcHdatGiRevfurVdffVXBwcG6fPmyvv76a3300UcKCgrSgQMHVKxYsQLNYLPZNGHChAK7i71OnToqU6bMLd/d/Ouvv6pdu3aKj4/XE088odDQUBUvXlyJiYn65JNPlJycrIyMjNvK8NZbb2nEiBFKSkpS5cqVb/9J3GUee+wxxcfHq3HjxkpISNCDDz54y/P/888/Kzg4WD179tTjjz+urKwsXbhwQbt379Z///tf2Ww2vf/+++rRo4fjmKysLGVkZMjDw0Nubrd+D1Lx4sX11FNP3dYPYK5evaqrV6/Ky8vLsc1msykqKkrvvPPOLZ/HbLZr164pMzNTnp6eOe6kBwAAwO1ztzoAAAAA7n7t27dXo0aNJEkvvPCCSpcurbffflufffaZevbsmesx6enp8vHxuZMx74hevXrp22+/1aeffqquXbs67Xvttdc0duxYi5IVvKtXryorK0seHh5/6TwfffSR7rvvPrm5ualOnTqmzvHQQw/p2Wefddp27NgxtW3bVpGRkapZs6bq1asnSXJzc3MqvAtC9uvd3d1d7u7W/TWsSJEiKlKkiGXXBwAAuNewRAwAAADyXevWrSVJSUlJkv5XOhcvXlw//vijHn/8cZUoUUIRERGS/lc8Dh8+XBUrVpSnp6eqV6+ut956S3/+h5ZXrlzR0KFDVbZsWZUoUUKdOnXSyZMnc1y7V69eud7lndva15K0ePFiNWnSRMWKFZO/v79atGihdevWSZIqV66sgwcPavPmzY4lR262XMnOnTu1Zs0a9e3bN0e5Lkmenp566623HF/v27dPvXr10v333y8vLy8FBgaqT58++u2335xyjxgxQpIUHBzsyHH9GtqLFy9Ww4YN5e3trVKlSqlHjx46ceJEjuvPmzdP999/v7y9vdWkSRNt3bpVjz32WI7ndPbsWfXt21cBAQHy8vJSvXr19OGHHzqNyV6K5a233tKsWbNUpUoVeXp6ateuXfLx8dHgwYNzXP/kyZMqUqSIpkyZcsM5lKSKFSve1p3ktyooKEiLFi1SRkaGpk2b5tie2xrsR48eVdeuXRUYGCgvLy9VqFBBPXr0UGpqqqT/3XWenp6uDz/80PE96dWrl6T//7V26NAhPfPMM/L399ejjz7qtC83S5YsUfXq1eXl5aWGDRtqy5YtTvtv9bV9s2w3WoP93XffVe3ateXp6Sm73a6oqKgcSxI99thjqlOnjg4dOqRWrVqpWLFiuu+++5zmEgAAoLDhDnYAAADkux9//FGSVLp0ace2q1evKiwsTI8++qjeeustFStWTIZhqFOnTtq4caP69u2r+vXra+3atRoxYoR++eUXzZw503H8Cy+8oMWLF+uZZ55Rs2bNtGHDBnXo0OEv5Zw0aZImTpyoZs2a6dVXX5WHh4d27typDRs2qG3btpo1a5YGDhyo4sWLO+48DwgIuOH5Vq1aJUl67rnnbun6cXFx+umnn9S7d28FBgbq4MGDWrBggQ4ePKhvvvlGNptNXbp00ffff6+PP/5YM2fOVJkyZSRJZcuWlSS9/vrrGjdunJ5++mm98MILOnfunObOnasWLVro22+/VcmSJSVJMTExio6OVvPmzTV06FD9/PPPCg8Pl7+/vypUqODI9Mcff+ixxx7TDz/8oOjoaAUHB2v58uXq1auXUlJSchTnCxcu1OXLl9W/f395enqqUqVK6ty5s5YtW6a3337b6W7pjz/+WIZhOH64YoWQkBBVqVJFcXFxNxyTkZGhsLAwXblyRQMHDlRgYKB++eUXrV69WikpKfLz89NHH32kF154QU2aNFH//v0lSVWqVHE6T7du3VStWjW98cYbOX5g9GebN2/WsmXLNGjQIHl6eurdd99Vu3bttGvXrtu+i/9Wsl1v4sSJmjRpkkJDQzVgwAAlJiYqJiZGu3fv1rZt21S0aFHH2AsXLqhdu3bq0qWLnn76aX366acaNWqU6tatq/bt299WTgAAgHuCAQAAAJi0cOFCQ5Lx1VdfGefOnTNOnDhhfPLJJ0bp0qUNb29v4+TJk4ZhGEZkZKQhyRg9erTT8StXrjQkGZMnT3ba/tRTTxk2m8344YcfDMMwjISEBEOS8fe//91p3DPPPGNIMiZMmODYFhkZaQQFBeXIOmHCBOP6t79Hjx413NzcjM6dOxvXrl1zGpuVleX4de3atY2WLVve0nx07tzZkGRcuHDhlsZfunQpx7aPP/7YkGRs2bLFsW369OmGJCMpKclp7M8//2wUKVLEeP31152279+/33B3d3dsv3LlilG6dGmjcePGRmZmpmPcokWLDElOz2/WrFmGJGPx4sWObRkZGUZISIhRvHhxIy0tzTAMw0hKSjIkGb6+vsbZs2edrr927VpDkvHll186bX/wwQdveS6z3c78X59r+vTpNxzz5JNPGpKM1NRUwzAMY+PGjYYkY+PGjYZhGMa3335rSDKWL19+02v5+PgYkZGRObZnv9Z69ux5w33Xk2RIMvbs2ePYduzYMcPLy8vo3LmzY9utvrZvli3792z2a+ns2bOGh4eH0bZtW6ffB++8844hyfjggw8c21q2bGlIMv71r385tl25csUIDAw0unbtmuNaAAAAhQFLxAAAAOAvCw0NVdmyZVWxYkX16NFDxYsX14oVK3Tfffc5jRswYIDT11988YWKFCmiQYMGOW0fPny4DMPQl19+6RgnKce4IUOGmM68cuVKZWVlafz48TmWIzH74Y9paWmSpBIlStzSeG9vb8evL1++rF9//VUPP/ywJGnv3r15Hv/f//5XWVlZevrpp/Xrr786HoGBgapWrZo2btwoSdqzZ49+++039evXz2n974iICPn7+zud84svvlBgYKDT2vlFixbVoEGDdPHiRW3evNlpfNeuXR1302cLDQ2V3W7XkiVLHNsOHDigffv25VgX3QrFixeXJP3++++57vfz85MkrV27VpcuXTJ9nRdffPGWx4aEhKhhw4aOrytVqqQnn3xSa9eu1bVr10xnyMtXX32ljIwMDRkyxOn3Qb9+/eTr66s1a9Y4jS9evLjT99DDw0NNmjTRTz/9VGAZAQAAXBlLxAAAAOAvmzdvnh544AG5u7srICBA1atXz1Fau7u7Oy1FIv3vQyftdnuOQrpmzZqO/dn/dXNzy7HMRfXq1U1n/vHHH+Xm5qZatWqZPsef+fr6SvpfcZu9NMvNnD9/XpMmTdInn3yis2fPOu3LXuv7Zo4ePSrDMFStWrVc92cv7ZE9j1WrVnXa7+7unmNN72PHjqlatWo5vn9//p5kCw4OznFdNzc3RUREKCYmRpcuXVKxYsW0ZMkSeXl5qVu3bnk+r4J28eJFSTf+QUhwcLCGDRumt99+W0uWLFHz5s3VqVMnPfvss47y/VbkNjc3ktv38IEHHtClS5d07tw5BQYG3vK5bkf29/PPv5c8PDx0//335/h+V6hQIccPoPz9/bVv374CyQcAAODqKNgBAADwlzVp0kSNGjW66RhPT88C+eDKP7vR3ecFeRdwtho1akiS9u/fr+bNm+c5/umnn9b27ds1YsQI1a9fX8WLF1dWVpbatWunrKysPI/PysqSzWbTl19+6bTWebbsO7UL0vV34V/v+eef1/Tp07Vy5Ur17NlTS5cu1RNPPHFbBXVBOXDggMqVK+f4gUhuZsyYoV69eumzzz7TunXrNGjQIE2ZMkXffPNNjh8U3ciN5sYsK1/b2XJ7nUnKc415AACAexVLxAAAAMAyQUFBOnXqVI6lOo4cOeLYn/3frKwsx4enZktMTMxxTn9/f6WkpOTY/uc7catUqaKsrCwdOnTophlvZ7mYjh07SpIWL16c59gLFy5o/fr1Gj16tCZNmqTOnTvr//7v/3T//fffcoYqVarIMAwFBwcrNDQ0xyN7uZnsefzhhx+cjr969ap+/vlnp21BQUE6evRojoL/z9+TvNSpU0cNGjTQkiVLtHXrVh0/fvyWP/y1IO3YsUM//vij2rZtm+fYunXr6pVXXtGWLVu0detW/fLLL5o/f75jv9mlhHJz9OjRHNu+//57FStWzLEEz62+tm8nW/b388+/lzIyMpSUlHTL328AAIDCioIdAAAAlnn88cd17do1vfPOO07bZ86cKZvNpvbt20uS479z5sxxGjdr1qwc56xSpYpSU1Odlqw4ffq0VqxY4TQuPDxcbm5uevXVV3OUydffjevj45NrqZmbkJAQtWvXTv/85z+1cuXKHPszMjL00ksvSfr/7wT+852/uT0nHx8fScqRo0uXLipSpIgmTZqU4zyGYei3336TJDVq1EilS5fWe++9p6tXrzrGLFmyRBcuXHA67vHHH1dycrKWLVvm2Hb16lXNnTtXxYsXV8uWLW8yA86ee+45rVu3TrNmzVLp0qUd30erHDt2TL169ZKHh4dGjBhxw3FpaWlO8yT9r2x3c3PTlStXHNtu57WRlx07djitu3/ixAl99tlnatu2reO1cquv7dvJFhoaKg8PD82ZM8fpNfT+++8rNTVVHTp0+AvPCgAA4N7HEjEAAACwTMeOHdWqVSuNHTtWP//8s+rVq6d169bps88+05AhQxxrrtevX189e/bUu+++q9TUVDVr1kzr16/PcUe2JPXo0UOjRo1S586dNWjQIF26dEkxMTF64IEHnArMqlWrauzYsXrttdfUvHlzdenSRZ6entq9e7fsdrumTJkiSWrYsKFiYmI0efJkVa1aVeXKlVPr1q1v+Jz+9a9/qW3bturSpYs6duyoNm3ayMfHR0ePHtUnn3yi06dP66233pKvr69atGihadOmKTMzU/fdd5/WrVunpKSkHOfM/vDLsWPHqkePHipatKg6duyoKlWqaPLkyRozZox+/vlnhYeHq0SJEkpKStKKFSvUv39/vfTSS/Lw8NDEiRM1cOBAtW7dWk8//bR+/vlnLVq0SFWqVHG627l///76xz/+oV69eik+Pl6VK1fWp59+qm3btmnWrFm3/AGukvTMM89o5MiRWrFihQYMGOBYEz4vW7Zs0ZYtWyRJ586dU3p6uiZPnixJatGihVq0aJHnOfbu3avFixcrKytLKSkp2r17t/7zn//IZrPpo48+0oMPPnjDYzds2KDo6Gh169ZNDzzwgK5evaqPPvpIRYoUUdeuXR3jGjZsqK+++kpvv/227Ha7goOD1bRp01t6jn9Wp04dhYWFadCgQfL09NS7774rSZo0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6mh3XHx8vGbPnq29e/cW+n9h9mc9evRw/Lpu3bp68MEHVaVKFW3atElt2rSxMJl1srKyJElPPvmkhg4dKkmqX7++tm/frvnz56tly5ZWxnMZH3zwgSIiIgr93yPnzp2rb775RqtWrVJQUJC2bNmiqKgo2e32QvsvxIsWLar//ve/6tu3r0qVKqUiRYooNDRU7du3l2EYVse7I+6FLo472IH/Jzo6WqtXr9bGjRtVoUIFq+O4BA8PD1WtWlUNGzbUlClTVK9ePc2ePdvqWJaJj4/X2bNn9dBDD8nd3V3u7u7avHmz5syZI3d390J958r1SpYsqQceeEA//PCD1VEsVb58+Rw/jKpZsybL5/w/x44d01dffaUXXnjB6iguYcSIEY672OvWravnnntOQ4cOLfT/WqZKlSravHmzLl68qBMnTmjXrl3KzMzU/fffb3U0lxAYGCjpf//s/Hpnzpxx7AP+LLtcP3bsmOLi4rh7/f/x8fFR1apV9fDDD+v999+Xu7u73n//fatjWWLr1q06e/asKlWq5HjPe+zYMQ0fPlyVK1e2Op5Luf/++1WmTJlC/b63TJkycnd3533vTWzdulWJiYmF/n3vH3/8oZdffllvv/22OnbsqAcffFDR0dHq3r273nrrLavjWaphw4ZKSEhQSkqKTp8+rdjYWP3222+F4j3vjbq4wMBAZWRkKCUlxWm8q77PpWBHoWcYhqKjo7VixQpt2LBBwcHBVkdyWVlZWY71wQqjNm3aaP/+/UpISHA8GjVqpIiICCUkJKhIkSJWR3QJFy9e1I8//qjy5ctbHcVSjzzyiBITE522ff/99woKCrIokWtZuHChypUrpw4dOlgdxSVcunRJbm7Ob8uKFCniuCussPPx8VH58uV14cIFrV27Vk8++aTVkVxCcHCwAgMDtX79ese2tLQ07dy5k89MQa6yy/WjR4/qq6++UunSpa2O5LIK8/ve5557Tvv27XN6z2u32zVixAitXbvW6ngu5eTJk/rtt98K9fteDw8PNW7cmPe9N/H++++rYcOGhfpzHaT//T8oMzOT97w34efnp7Jly+ro0aPas2fPPf2eN68urmHDhipatKjT+9zExEQdP37cJd/nskRMIXPx4kWnn64nJSUpISFBpUqVUqVKlSxMZp2oqCgtXbpUn332mUqUKOFYy8nPz0/e3t4Wp7POmDFj1L59e1WqVEm///67li5dqk2bNhXqN9UlSpTIsTa/j4+PSpcuXajX7H/ppZfUsWNHBQUF6dSpU5owYYKKFCminj17Wh3NUkOHDlWzZs30xhtv6Omnn9auXbu0YMECLViwwOpolsvKytLChQsVGRkpd3feikhSx44d9frrr6tSpUqqXbu2vv32W7399tvq06eP1dEstXbtWhmGoerVq+uHH37QiBEjVKNGDfXu3dvqaHdMXu/dhgwZosmTJ6tatWoKDg7WuHHjZLfbFR4ebl3oOyCveTl//ryOHz+uU6dOSZKj+AkMDHTJu57yy83mpXz58nrqqae0d+9erV69WteuXXO87y1VqpQ8PDysil3gbjYvpUuX1uuvv65OnTqpfPny+vXXXzVv3jz98ssv6tatm4WpC1Zev4f+/MOXokWLKjAwUNWrV7/TUe+om81LqVKlNGnSJHXt2lWBgYH68ccfNXLkSFWtWlVhYWEWpi54eb1eRowYoe7du6tFixZq1aqVYmNj9fnnn2vTpk3Whb4DbqVfSUtL0/LlyzVjxgyrYt5Rec1Jy5YtNWLECHl7eysoKEibN2/Wv/71L7399tsWpi54ec3L8uXLVbZsWVWqVEn79+/X4MGDFR4efk9/+GteXZyfn5/69u2rYcOGqVSpUvL19dXAgQMVEhKihx9+2OL0uTBQqGzcuNGQlOMRGRlpdTTL5DYfkoyFCxdaHc1Sffr0MYKCggwPDw+jbNmyRps2bYx169ZZHcvltGzZ0hg8eLDVMSzVvXt3o3z58oaHh4dx3333Gd27dzd++OEHq2O5hM8//9yoU6eO4enpadSoUcNYsGCB1ZFcwtq1aw1JRmJiotVRXEZaWpoxePBgo1KlSoaXl5dx//33G2PHjjWuXLlidTRLLVu2zLj//vsNDw8PIzAw0IiKijJSUlKsjnVH5fXeLSsryxg3bpwREBBgeHp6Gm3atCkUv7fympeFCxfmun/ChAmW5i5oN5uXpKSkG77v3bhxo9XRC9TN5uWPP/4wOnfubNjtdsPDw8MoX7680alTJ2PXrl1Wxy5Qt/v3wqCgIGPmzJl3NKMVbjYvly5dMtq2bWuULVvWKFq0qBEUFGT069fPSE5Otjp2gbuV18v7779vVK1a1fDy8jLq1atnrFy50rrAd8itzMs//vEPw9vbu9C8f8lrTk6fPm306tXLsNvthpeXl1G9enVjxowZRlZWlrXBC1he8zJ79myjQoUKRtGiRY1KlSoZr7zyyj3/94Bb6eL++OMP4+9//7vh7+9vFCtWzOjcubNx+vRp60LfhM0wCsmK+QAAAAAAAAAA5CPWYAcAAAAAAAAAwAQKdgAAAAAAAAAATKBgBwAAAAAAAADABAp2AAAAAAAAAABMoGAHAAAAAAAAAMAECnYAAAAAAAAAAEygYAcAAAAAAAAAwAQKdgAAAAAAAAAATKBgBwAAAFxUr169FB4ebnUMAAAAADdAwQ4AAADcpl69eslms8lms8nDw0NVq1bVq6++qqtXr1od7aYWLVqkkiVL3vZxP/zwg3r37q0KFSrI09NTwcHB6tmzp/bs2XPL55g4caLq169/29d2Za+//rqaNWumYsWKmZpXAAAA3P0o2AEAAAAT2rVrp9OnT+vo0aMaPny4Jk6cqOnTp+cYl5GRYUG6/LNnzx41bNhQ33//vf7xj3/o0KFDWrFihWrUqKHhw4dbHc+0zMzMv3yOjIwMdevWTQMGDMiHRAAAALgbUbADAAAAJnh6eiowMFBBQUEaMGCAQkNDtWrVKseyLq+//rrsdruqV68uSdq/f79at24tb29vlS5dWv3799fFixcd57t27ZqGDRumkiVLqnTp0ho5cqQMw3C6ZuXKlTVr1iynbfXr19fEiRMdX6ekpOhvf/ubAgIC5OXlpTp16mj16tXatGmTevfurdTUVMfd99cflxvDMNSrVy9Vq1ZNW7duVYcOHVSlShXVr19fEyZM0GeffeYYO2rUKD3wwAMqVqyY7r//fo0bN85RYi9atEiTJk3Sd99957j2okWLHHlfeOEFlS1bVr6+vmrdurW+++47pxyTJ09WuXLlVKJECb3wwgsaPXq0093wWVlZevXVVx132NevX1+xsbGO/T///LNsNpuWLVumli1bysvLSwsWLJCvr68+/fRTp2utXLlSPj4++v333286N5I0adIkDR06VHXr1s1zLAAAAO5NFOwAAABAPvD29nbcrb5+/XolJiYqLi5Oq1evVnp6usLCwuTv76/du3dr+fLl+uqrrxQdHe04fsaMGVq0aJE++OADff311zp//rxWrFhxWxmysrLUvn17bdu2TYsXL9ahQ4f05ptvqkiRImrWrJlmzZolX19fnT59WqdPn9ZLL7100/MlJCTo4MGDGj58uNzccv7V4fplUUqUKKFFixbp0KFDmj17tt577z3NnDlTktS9e3cNHz5ctWvXdly7e/fukqRu3brp7Nmz+vLLLxUfH6+HHnpIbdq00fnz5yVJS5Ys0euvv66pU6cqPj5elSpVUkxMjFOO2bNna8aMGXrrrbe0b98+hYWFqVOnTjp69KjTuNGjR2vw4ME6fPiwunTpoh49emjhwoVOYxYuXKinnnpKJUqUuLVJBwAAQKHmbnUAAAAA4G5mGIbWr1+vtWvXauDAgTp37px8fHz0z3/+Ux4eHpKk9957T5cvX9a//vUv+fj4SJLeeecddezYUVOnTlVAQIBmzZqlMWPGqEuXLpKk+fPna+3atbeV5auvvtKuXbt0+PBhPfDAA5Kk+++/37Hfz89PNptNgYGBt3S+7IK6Ro0aeY595ZVXHL+uXLmyXnrpJX3yyScaOXKkvL29Vbx4cbm7uztd++uvv9auXbt09uxZeXp6SpLeeustrVy5Up9++qn69++vuXPnqm/fvurdu7ckafz48Vq3bp3T3f9vvfWWRo0apR49ekiSpk6dqo0bN2rWrFmaN2+eY9yQIUMc8ytJL7zwgpo1a6bTp0+rfPnyOnv2rL744gt99dVXtzQ/AAAAAHewAwAAACasXr1axYsXl5eXl9q3b6/u3bs7llypW7euo1yXpMOHD6tevXqOcl2SHnnkEWVlZSkxMVGpqak6ffq0mjZt6tjv7u6uRo0a3VamhIQEVahQwVGu/1V/XqLmZpYtW6ZHHnlEgYGBKl68uF555RUdP378psd89913unjxokqXLq3ixYs7HklJSfrxxx8lSYmJiWrSpInTcdd/nZaWplOnTumRRx5xGvPII4/o8OHDTtv+PJ9NmjRR7dq19eGHH0qSFi9erKCgILVo0eKWnzcAAAAKN+5gBwAAAExo1aqVYmJi5OHhIbvdLnf3//+t9fVFen5yc3PLUXpf/2Gd3t7e+Xq97KL+yJEjatCgwQ3H7dixQxEREZo0aZLCwsLk5+enTz75RDNmzLjp+S9evKjy5ctr06ZNOfZdv/xMfsnt+/LCCy9o3rx5Gj16tBYuXKjevXvLZrPl+7UBAABwb+IOdgAAAMAEHx8fVa1aVZUqVXIq13NTs2ZNfffdd0pPT3ds27Ztm9zc3FS9enX5+fmpfPny2rlzp2P/1atXFR8f73SesmXL6vTp046v09LSlJSU5Pj6wQcf1MmTJ/X999/nmsPDw0PXrl275edYv3591apVSzNmzFBWVlaO/SkpKZKk7du3KygoSGPHjlWjRo1UrVo1HTt2LM9rP/TQQ0pOTpa7u7uqVq3q9ChTpowkqXr16tq9e7fTcdd/7evrK7vdrm3btjmN2bZtm2rVqpXnc3z22Wd17NgxzZkzR4cOHVJkZGSexwAAAADZKNgBAACAAhYRESEvLy9FRkbqwIED2rhxowYOHKjnnntOAQEBkqTBgwfrzTff1MqVK3XkyBH9/e9/dxTY2Vq3bq2PPvpIW7du1f79+xUZGakiRYo49rds2VItWrRQ165dFRcXp6SkJH355ZeKjY2V9L+10S9evKj169fr119/1aVLl26a22azaeHChfr+++/VvHlzffHFF/rpp5+0b98+vf7663ryySclSdWqVdPx48f1ySef6Mcff9ScOXNyfEBr5cqVlZSUpISEBP3666+6cuWKQkNDFRISovDwcK1bt04///yztm/frrFjx2rPnj2SpIEDB+r999/Xhx9+qKNHj2ry5Mnat2+f013mI0aM0NSpU7Vs2TIlJiZq9OjRSkhI0ODBg/P83vj7+6tLly4aMWKE2rZtqwoVKuR5TLbjx48rISFBx48f17Vr15SQkKCEhASn9eEBAABwb6NgBwAAAApYsWLFtHbtWp0/f16NGzfWU089pTZt2uidd95xjBk+fLiee+45RUZGKiQkRCVKlFDnzp2dzjNmzBi1bNlSTzzxhDp06KDw8HBVqVLFacx//vMfNW7cWD179lStWrU0cuRIx53jzZo104svvqju3burbNmymjZtWp7ZmzRpoj179qhq1arq16+fatasqU6dOungwYOaNWuWJKlTp04aOnSooqOjVb9+fW3fvl3jxo1zOk/Xrl3Vrl07tWrVSmXLltXHH38sm82mL774Qi1atFDv3r31wAMPqEePHjp27JjjBw8REREaM2aMXnrpJT300ENKSkpSr1695OXl5Tj3oEGDNGzYMA0fPlx169ZVbGysVq1apWrVqt3S96dv377KyMhQnz59bml8tvHjx6tBgwaaMGGCLl68qAYNGqhBgwaOHw4AAADg3mczbueTiwAAAADAYv/3f/+nwMBAffTRR/lyvo8++khDhw7VqVOnnD6cFgAAAMgLH3IKAAAAwGVdunRJ8+fPV1hYmIoUKaKPP/5YX331leLi4vLl3KdPn9abb76pv/3tb5TrAAAAuG0sEQMAAAAUUlu3blXx4sVv+HAF1y8j07BhQ33++ef6z3/+o9DQ0L987mnTpqlGjRoKDAzUmDFjnPa98cYbN5yX9u3b/+VrAwAA4N7AEjEAAABAIfXHH3/ol19+ueH+qlWr3sE0ruX8+fM6f/58rvu8vb1133333eFEAAAAcEUU7AAAAAAAAAAAmMASMQAAAAAAAAAAmEDBDgAAAAAAAACACRTsAAAAAAAAAACYQMEOAAAAAAAAAIAJFOwAAAAAAAAAAJhAwQ4AAAAAAAAAgAkU7AAAAAAAAAAAmPD/AUw8RCKt87C1AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "\n",
        "# Set figure size\n",
        "plt.figure(figsize=(18, 5))\n",
        "\n",
        "# Plot the count of 'Product_Category_1' with a custom color\n",
        "sns.countplot(x=data['Product_Category_1'], palette='coolwarm')  # You can change 'coolwarm' to any other palette\n",
        "\n",
        "# Show the plot\n",
        "plt.title(\"Product Category 1 Distribution\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K7DjTmjqW8cO"
      },
      "source": [
        "It is clear that `Product_Category_1` numbers 1,5 and 8 stand out. Unfortunately we don't know which product each number represents as it is masked."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "mN4y405PW8cO",
        "outputId": "25acb29c-691a-41a4-b6e5-7500353f8faf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-24-71c8fb53690c>:11: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Product_Category_1', y='Purchase', data=category_purchase_mean, palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Group by 'Product_Category_1' and calculate the mean of 'Purchase'\n",
        "category_purchase_mean = data.groupby('Product_Category_1')['Purchase'].mean().reset_index()\n",
        "\n",
        "# Set the size of the plot\n",
        "plt.figure(figsize=(18, 5))\n",
        "\n",
        "# Plotting the bar plot using seaborn\n",
        "sns.barplot(x='Product_Category_1', y='Purchase', data=category_purchase_mean, palette='viridis')\n",
        "\n",
        "# Adding title and labels\n",
        "plt.title(\"Product_Category_1 and Purchase Mean Analysis\")\n",
        "plt.xlabel(\"Product Category 1\")\n",
        "plt.ylabel(\"Mean Purchase Amount\")\n",
        "plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NO2Aq-wVW8cO"
      },
      "source": [
        "If you see the value spent on average for Product_Category_1 you see that although there were more products bought for categories 1,5,8 the average amount spent for those three is not the highest. It is interesting to see other categories appearing with high purchase values despite having low impact on sales number."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 378
        },
        "id": "Yh_vb7thW8cP",
        "outputId": "e4fe2476-e5a9-4f46-9831-e828972cf9d9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Group by 'Product_Category_1' and calculate the sum of 'Purchase'\n",
        "category_purchase_sum = data.groupby('Product_Category_1')['Purchase'].sum()\n",
        "\n",
        "# Plotting the bar chart with custom color\n",
        "category_purchase_sum.plot(kind='bar', figsize=(18, 5), color='skyblue')\n",
        "\n",
        "# Adding title and labels\n",
        "plt.title(\"Product_Category_1 and Purchase Analysis\")\n",
        "plt.xlabel(\"Product Category 1\")\n",
        "plt.ylabel(\"Total Purchase Amount\")\n",
        "plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vzt8SkS0W8cP"
      },
      "source": [
        "The distribution that we saw for this predictor previously appears here. For example, those three products have the highest sum of sales since their were three most sold products."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UI7lRrg-W8cP"
      },
      "source": [
        "### Product_Category_2"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot with custom colors\n",
        "sns.countplot(x=data['Product_Category_2'], palette=['#FF6347', '#4682B4', '#32CD32'])\n",
        "\n",
        "# Show the plot\n",
        "plt.title(\"Product Category 2 Distribution\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 631
        },
        "id": "bnnvnEKjyHId",
        "outputId": "c95690a3-869e-44ed-af38-a29bd822b744"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-27-3cf29345a4a6>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=data['Product_Category_2'], palette=['#FF6347', '#4682B4', '#32CD32'])\n",
            "<ipython-input-27-3cf29345a4a6>:2: UserWarning: \n",
            "The palette list has fewer values (3) than needed (17) and will cycle, which may produce an uninterpretable plot.\n",
            "  sns.countplot(x=data['Product_Category_2'], palette=['#FF6347', '#4682B4', '#32CD32'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "moClue12W8cP"
      },
      "source": [
        "### Product_Category_3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "id": "BQVaCwYnW8cP",
        "outputId": "4ada825f-aae4-4307-ad55-af63994b51f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-28-510594aea4d8>:8: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=data['Product_Category_3'], palette='Set1')  # Replace 'Set1' with any other palette\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Set figure size\n",
        "plt.figure(figsize=(18, 5))\n",
        "\n",
        "# Plot the count of 'Product_Category_3' with a predefined color palette\n",
        "sns.countplot(x=data['Product_Category_3'], palette='Set1')  # Replace 'Set1' with any other palette\n",
        "\n",
        "# Show the plot\n",
        "plt.title(\"Product Category 3 Distribution\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NVUMFJYnW8cR",
        "outputId": "dce9893b-9756-484b-9abd-79f69ae0d5f4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['User_ID', 'Product_ID', 'Gender', 'Age', 'Occupation', 'City_Category',\n",
              "       'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category_1',\n",
              "       'Product_Category_2', 'Product_Category_3', 'Purchase'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "data.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "unRRylCBW8cR"
      },
      "outputs": [],
      "source": [
        "df = data.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "-5v8cSBNW8cR",
        "outputId": "127bc079-717c-4b4f-fc30-e4187cc435ce"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User_ID Product_ID Gender   Age  Occupation City_Category  \\\n",
              "0  1000001  P00069042      F  0-17          10             A   \n",
              "1  1000001  P00248942      F  0-17          10             A   \n",
              "2  1000001  P00087842      F  0-17          10             A   \n",
              "3  1000001  P00085442      F  0-17          10             A   \n",
              "4  1000002  P00285442      M   55+          16             C   \n",
              "\n",
              "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
              "0                          2               0                   3   \n",
              "1                          2               0                   1   \n",
              "2                          2               0                  12   \n",
              "3                          2               0                  12   \n",
              "4                         4+               0                   8   \n",
              "\n",
              "   Product_Category_2  Product_Category_3  Purchase  \n",
              "0                 NaN                 NaN      8370  \n",
              "1                 6.0                14.0     15200  \n",
              "2                 NaN                 NaN      1422  \n",
              "3                14.0                 NaN      1057  \n",
              "4                 NaN                 NaN      7969  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-256166e5-501b-4271-a618-3251cb710d8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Stay_In_Current_City_Years</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>F</td>\n",
              "      <td>0-17</td>\n",
              "      <td>10</td>\n",
              "      <td>A</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>M</td>\n",
              "      <td>55+</td>\n",
              "      <td>16</td>\n",
              "      <td>C</td>\n",
              "      <td>4+</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-256166e5-501b-4271-a618-3251cb710d8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-256166e5-501b-4271-a618-3251cb710d8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-256166e5-501b-4271-a618-3251cb710d8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8157b56f-53b3-4f1b-b46d-84c023f9c654\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8157b56f-53b3-4f1b-b46d-84c023f9c654')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8157b56f-53b3-4f1b-b46d-84c023f9c654 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fuh6-eaPW8cR"
      },
      "outputs": [],
      "source": [
        "# df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].replace(to_replace=\"4+\",value=\"4\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zve2km1GW8cS"
      },
      "outputs": [],
      "source": [
        "#Dummy Variables:\n",
        "df = pd.get_dummies(df, columns=['Stay_In_Current_City_Years'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yXxqhbu8W8cS"
      },
      "source": [
        "## Encoding the categorical variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xXY4TzqfW8cS"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "lr = LabelEncoder()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CeMsjPaRW8cS"
      },
      "outputs": [],
      "source": [
        "df['Gender'] = lr.fit_transform(df['Gender'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ab8uHACKW8cT"
      },
      "outputs": [],
      "source": [
        "df['Age'] = lr.fit_transform(df['Age'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tnI2KpbCW8cT"
      },
      "outputs": [],
      "source": [
        "df['City_Category'] = lr.fit_transform(df['City_Category'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "r6IypKUeW8cT",
        "outputId": "62ab911c-aae8-4564-e695-b81cdcc1c637"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   User_ID Product_ID  Gender  Age  Occupation  City_Category  Marital_Status  \\\n",
              "0  1000001  P00069042       0    0          10              0               0   \n",
              "1  1000001  P00248942       0    0          10              0               0   \n",
              "2  1000001  P00087842       0    0          10              0               0   \n",
              "3  1000001  P00085442       0    0          10              0               0   \n",
              "4  1000002  P00285442       1    6          16              2               0   \n",
              "\n",
              "   Product_Category_1  Product_Category_2  Product_Category_3  Purchase  \\\n",
              "0                   3                 NaN                 NaN      8370   \n",
              "1                   1                 6.0                14.0     15200   \n",
              "2                  12                 NaN                 NaN      1422   \n",
              "3                  12                14.0                 NaN      1057   \n",
              "4                   8                 NaN                 NaN      7969   \n",
              "\n",
              "   Stay_In_Current_City_Years_0  Stay_In_Current_City_Years_1  \\\n",
              "0                         False                         False   \n",
              "1                         False                         False   \n",
              "2                         False                         False   \n",
              "3                         False                         False   \n",
              "4                         False                         False   \n",
              "\n",
              "   Stay_In_Current_City_Years_2  Stay_In_Current_City_Years_3  \\\n",
              "0                          True                         False   \n",
              "1                          True                         False   \n",
              "2                          True                         False   \n",
              "3                          True                         False   \n",
              "4                         False                         False   \n",
              "\n",
              "   Stay_In_Current_City_Years_4+  \n",
              "0                          False  \n",
              "1                          False  \n",
              "2                          False  \n",
              "3                          False  \n",
              "4                           True  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-178a244e-badd-4a6a-b82a-8d64a53af910\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User_ID</th>\n",
              "      <th>Product_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Occupation</th>\n",
              "      <th>City_Category</th>\n",
              "      <th>Marital_Status</th>\n",
              "      <th>Product_Category_1</th>\n",
              "      <th>Product_Category_2</th>\n",
              "      <th>Product_Category_3</th>\n",
              "      <th>Purchase</th>\n",
              "      <th>Stay_In_Current_City_Years_0</th>\n",
              "      <th>Stay_In_Current_City_Years_1</th>\n",
              "      <th>Stay_In_Current_City_Years_2</th>\n",
              "      <th>Stay_In_Current_City_Years_3</th>\n",
              "      <th>Stay_In_Current_City_Years_4+</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00069042</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8370</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00248942</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>15200</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00087842</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1000001</td>\n",
              "      <td>P00085442</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>14.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1057</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1000002</td>\n",
              "      <td>P00285442</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7969</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-178a244e-badd-4a6a-b82a-8d64a53af910')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-178a244e-badd-4a6a-b82a-8d64a53af910 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-178a244e-badd-4a6a-b82a-8d64a53af910');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6e6414b0-c988-43f9-bcb6-1e9a5dec6f7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e6414b0-c988-43f9-bcb6-1e9a5dec6f7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6e6414b0-c988-43f9-bcb6-1e9a5dec6f7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PSMOaTdaW8cU"
      },
      "outputs": [],
      "source": [
        "df['Product_Category_2'] =df['Product_Category_2'].fillna(0).astype('int64')\n",
        "df['Product_Category_3'] =df['Product_Category_3'].fillna(0).astype('int64')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "BRGrUnWZW8cU",
        "outputId": "74029669-71b9-491c-aa84-c305c5a03f43"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "User_ID                          0\n",
              "Product_ID                       0\n",
              "Gender                           0\n",
              "Age                              0\n",
              "Occupation                       0\n",
              "City_Category                    0\n",
              "Marital_Status                   0\n",
              "Product_Category_1               0\n",
              "Product_Category_2               0\n",
              "Product_Category_3               0\n",
              "Purchase                         0\n",
              "Stay_In_Current_City_Years_0     0\n",
              "Stay_In_Current_City_Years_1     0\n",
              "Stay_In_Current_City_Years_2     0\n",
              "Stay_In_Current_City_Years_3     0\n",
              "Stay_In_Current_City_Years_4+    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>User_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Occupation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City_Category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Marital_Status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Product_Category_3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchase</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Stay_In_Current_City_Years_4+</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1JO7qVl9W8cU",
        "outputId": "8085c812-f79e-4e29-9c11-c219187a8993"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 550068 entries, 0 to 550067\n",
            "Data columns (total 16 columns):\n",
            " #   Column                         Non-Null Count   Dtype \n",
            "---  ------                         --------------   ----- \n",
            " 0   User_ID                        550068 non-null  int64 \n",
            " 1   Product_ID                     550068 non-null  object\n",
            " 2   Gender                         550068 non-null  int64 \n",
            " 3   Age                            550068 non-null  int64 \n",
            " 4   Occupation                     550068 non-null  int64 \n",
            " 5   City_Category                  550068 non-null  int64 \n",
            " 6   Marital_Status                 550068 non-null  int64 \n",
            " 7   Product_Category_1             550068 non-null  int64 \n",
            " 8   Product_Category_2             550068 non-null  int64 \n",
            " 9   Product_Category_3             550068 non-null  int64 \n",
            " 10  Purchase                       550068 non-null  int64 \n",
            " 11  Stay_In_Current_City_Years_0   550068 non-null  bool  \n",
            " 12  Stay_In_Current_City_Years_1   550068 non-null  bool  \n",
            " 13  Stay_In_Current_City_Years_2   550068 non-null  bool  \n",
            " 14  Stay_In_Current_City_Years_3   550068 non-null  bool  \n",
            " 15  Stay_In_Current_City_Years_4+  550068 non-null  bool  \n",
            "dtypes: bool(5), int64(10), object(1)\n",
            "memory usage: 48.8+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yvN75BqbW8cU"
      },
      "source": [
        "## Dropping the irrelevant columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z4SGWP9mW8cV"
      },
      "outputs": [],
      "source": [
        "df = df.drop([\"User_ID\",\"Product_ID\"],axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "78ZDjsHyW8cV"
      },
      "source": [
        "## Splitting data into independent and dependent variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-V1917k0W8cV"
      },
      "outputs": [],
      "source": [
        "X = df.drop(\"Purchase\",axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mAz5tSR8W8cV"
      },
      "outputs": [],
      "source": [
        "y=df['Purchase']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w9FSTKajW8cV"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hZqcP2y4W8cV"
      },
      "source": [
        "## Modeling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vC-MAvTiW8cW"
      },
      "source": [
        "### Linear Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YqISX3iwW8cW"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "jlqoBzgfW8cW",
        "outputId": "da423198-d754-4ade-d967-c36f7421a561"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ],
      "source": [
        "lr = LinearRegression()\n",
        "lr.fit(X_train,y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PC3onSBCW8cW",
        "outputId": "cc152d8e-4225-40e7-ba85-bc100a9206d3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9536.400764131593"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ],
      "source": [
        "lr.intercept_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IWivHu-VW8cW",
        "outputId": "c381c84f-7126-4448-a5db-2d59af3e9c2f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 465.82318446,  112.36643445,    5.05508596,  314.06766138,\n",
              "        -58.23217776, -348.4514785 ,   12.98415047,  143.49190467,\n",
              "        -20.83796687,    5.4676518 ,   17.68367185,   -3.96751734,\n",
              "          1.65416056])"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "lr.coef_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s67UdonJW8cX"
      },
      "outputs": [],
      "source": [
        "y_pred = lr.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VQThIMPHW8cX"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import mean_absolute_error,mean_squared_error, r2_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7zihISyiW8cX",
        "outputId": "b2c8f22e-459a-4c91-b692-eefc3096154a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3532.069226165843"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ],
      "source": [
        "mean_absolute_error(y_test, y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOZB53LUW8cX",
        "outputId": "b8286633-a924-49e6-e5ed-a99d91400bf9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "21397853.26940751"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ],
      "source": [
        "mean_squared_error(y_test, y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RPREqxvxW8cX",
        "outputId": "fae5a530-52c9-4fd2-f74c-de5887fcce77"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.15192944521481688"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "r2_score(y_test, y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QloKjWVGW8cY",
        "outputId": "e43f1639-488b-4bca-955a-a377f8afed60"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE of Linear Regression Model is  4625.781368526566\n"
          ]
        }
      ],
      "source": [
        "from math import sqrt\n",
        "print(\"RMSE of Linear Regression Model is \",sqrt(mean_squared_error(y_test, y_pred)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0m2xyZINW8cY"
      },
      "source": [
        "# DecisionTreeRegressor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QwXpZ8OmW8cY"
      },
      "outputs": [],
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "# create a regressor object\n",
        "regressor = DecisionTreeRegressor(random_state = 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "BDeCXUd0W8cY",
        "outputId": "7b30fd32-2a8c-4e27-9969-0dba125c3bae"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(random_state=0)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "source": [
        "regressor.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aWNN8bDSW8cZ"
      },
      "outputs": [],
      "source": [
        "dt_y_pred = regressor.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d5ExLJ5QW8cZ",
        "outputId": "099acc45-ad9a-49f1-cbc3-b16089320e52"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2372.0357559134654"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ],
      "source": [
        "mean_absolute_error(y_test, dt_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G1RekwC-W8cZ",
        "outputId": "8018a505-d94f-4a02-a8f2-545b3017921e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11300579.466797074"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "mean_squared_error(y_test, dt_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hVyQWAhaW8cZ",
        "outputId": "28eb6a4d-5f63-4898-fbd4-de877fa59912"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5521191505924365"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ],
      "source": [
        "r2_score(y_test, dt_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mracUy1PW8ca",
        "outputId": "6fdcd745-d472-4090-c60b-fea6132979e2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE of Linear Regression Model is  3361.633452177241\n"
          ]
        }
      ],
      "source": [
        "from math import sqrt\n",
        "print(\"RMSE of Linear Regression Model is \",sqrt(mean_squared_error(y_test, dt_y_pred)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VY87ucA-W8ca"
      },
      "source": [
        "# Random Forest Regressor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gkVz3i-NW8ca"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# create a regressor object\n",
        "RFregressor = RandomForestRegressor(random_state = 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "yIhxDmQ8W8ca",
        "outputId": "86fea297-a065-40d9-acdd-ac4e00fe9340"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(random_state=0)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ],
      "source": [
        "RFregressor.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jZWeSFVAW8cb"
      },
      "outputs": [],
      "source": [
        "rf_y_pred = RFregressor.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KjA38L8iW8cb",
        "outputId": "b18edcc8-8d04-4a01-ecc5-26e83a514b53"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2222.049109204734"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ],
      "source": [
        "mean_absolute_error(y_test, rf_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O-6MLC_UW8cb",
        "outputId": "8e05d8a8-130c-4680-8415-35019f5b4153"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9310769.87311957"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ],
      "source": [
        "mean_squared_error(y_test, rf_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eIkRbWZAW8cb",
        "outputId": "596c0e4e-592a-4ad0-a276-cb1b01fb5b73"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6309821516972987"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ],
      "source": [
        "r2_score(y_test, rf_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zBPt_42OW8cc",
        "outputId": "c4c0f4bb-545c-4c1f-9aaf-0b2008700d59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE of Linear Regression Model is  3051.35541573242\n"
          ]
        }
      ],
      "source": [
        "from math import sqrt\n",
        "print(\"RMSE of Linear Regression Model is \",sqrt(mean_squared_error(y_test, rf_y_pred)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EytY7x8SW8cc"
      },
      "source": [
        "# XGBoost Regressor\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IZ3qGyj_W8cc"
      },
      "outputs": [],
      "source": [
        "from xgboost.sklearn import XGBRegressor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UgUgH5eTW8cc",
        "outputId": "89c842ca-aac2-4b26-ae64-1c5f894696ce"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Nantha\\Anaconda3\\lib\\site-packages\\xgboost\\core.py:587: FutureWarning: Series.base is deprecated and will be removed in a future version\n",
            "  if getattr(data, 'base', None) is not None and \\\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[23:14:35] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "             colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "             importance_type='gain', learning_rate=1.0, max_delta_step=0,\n",
              "             max_depth=6, min_child_weight=40, missing=None, n_estimators=100,\n",
              "             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n",
              "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=0, silent=None,\n",
              "             subsample=1, verbosity=1)"
            ]
          },
          "execution_count": 207,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xgb_reg = XGBRegressor(learning_rate=1.0, max_depth=6, min_child_weight=40, seed=0)\n",
        "\n",
        "xgb_reg.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "loNdBo8hW8cc"
      },
      "outputs": [],
      "source": [
        "xgb_y_pred = xgb_reg.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ci8yCoMHW8cd",
        "outputId": "28422d60-8ed1-4040-dcd3-b3a5e14a6cde"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "2154.954637289423"
            ]
          },
          "execution_count": 209,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mean_absolute_error(y_test, xgb_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "C7ehxRFSW8cd",
        "outputId": "9956625b-2c7b-49e4-a183-7f52f472eb76"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "8290522.888761112"
            ]
          },
          "execution_count": 210,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mean_squared_error(y_test, xgb_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UvlmRiHhW8cd",
        "outputId": "150d7893-8216-4aa4-f40d-ab702a72f2f5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.664869986978737"
            ]
          },
          "execution_count": 211,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "r2_score(y_test, xgb_y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7kV4fvM0W8cd",
        "outputId": "cbe2a729-d1dd-4e59-fba1-302772de6fa4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE of Linear Regression Model is  2879.326811732408\n"
          ]
        }
      ],
      "source": [
        "from math import sqrt\n",
        "print(\"RMSE of Linear Regression Model is \",sqrt(mean_squared_error(y_test, xgb_y_pred)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oTeXmChBW8cd"
      },
      "source": [
        "The ML algorithm that perform the best was XGBoost Regressor Model with RMSE = 2879"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}